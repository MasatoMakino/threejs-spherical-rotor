(()=>{"use strict";var __webpack_modules__={388:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Demo\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    return new three_module/* Scene */.xsS();\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      antialias: option.antialias\n    });\n    document.body.appendChild(renderer.domElement);\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(20);\n    scene.add(axesHelper);\n    const cone = new three_module/* Mesh */.Kj0(new three_module/* ConeGeometry */.b_z(5, 10, 16), new three_module/* MeshBasicMaterial */.vBJ({\n      wireframe: true\n    }));\n    scene.add(cone);\n    return axesHelper;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 3 modules\nvar esm = __webpack_require__(2);\n;// CONCATENATED MODULE: ./esm/SphericalRotor.js\n\n\nclass SphericalRotor {\n  constructor(cameraController) {\n    this.cameraController = cameraController;\n    this.isRotation = false;\n    /**\n     * カメラを横回転させる\n     * 往復ではなく無限運動。\n     */\n    this.rotateTheta = e => {\n      if (this._config?.speed == null) return;\n      this.cameraController.addPosition("theta", this._config.speed * (e.delta / (1000 / 30)), false, true);\n    };\n  }\n  set config(parameters) {\n    if (parameters == null) return;\n    this._config = SphericalRotorConfigUtil.init(parameters);\n  }\n  /**\n   * 回転アニメーションを開始する。\n   *\n   * rotateとstopは対の関係ではない。異なるoptionを指定された場合、rotateは現状のアニメーションを上書きして再実行される。\n   * @param option\n   */\n  rotate(option) {\n    if (this.isRotation) {\n      this.stop();\n    }\n    //横回転\n    if (this._config?.speed != null) {\n      esm/* RAFTicker */.F.on("tick", this.rotateTheta);\n    }\n    //縦往復ループ\n    this.startSphericalCameraLoop("phi", option);\n    //横往復ループ\n    this.startSphericalCameraLoop("theta", option);\n    //ズームインアウトループ\n    this.startSphericalCameraLoop("radius", option);\n    this.isRotation = true;\n  }\n  /**\n   * configオブジェクトから、縦、横、ズームループの状態を取り出す。\n   * 設定されている場合、ループを開始する。\n   *\n   * @param type 縦、横、ズームのいずれか\n   * @param option\n   * @private\n   */\n  startSphericalCameraLoop(type, option) {\n    const loop = SphericalRotorConfigUtil.extractSphericalParam(this._config, type);\n    if (loop == null) return;\n    this.cameraController.loop(type, loop.min, loop.max, {\n      duration: loop.duration,\n      startTime: option?.startTime\n    });\n  }\n  /**\n   * カメラの回転を一時停止する。\n   * @param [option] option.returnR = falseの時、アニメーションを行わない。\n   */\n  stop(option) {\n    if (!this.isRotation) return;\n    this.isRotation = false;\n    esm/* RAFTicker */.F.off("tick", this.rotateTheta);\n    this.cameraController.tweens.stop();\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.returnToDefaultR(option);\n  }\n  /**\n   * カメラをデフォルト位置まで戻す\n   * @param option\n   * @protected\n   */\n  returnToDefaultR(option) {\n    if (this._config?.defaultR != null && option?.returnR === true) {\n      this.cameraController.movePosition("radius", this._config.defaultR, {\n        duration: 333\n      });\n    }\n  }\n  static getDefaultStopParam(option) {\n    option ??= {};\n    option.returnR ??= true;\n    return option;\n  }\n}\n;// CONCATENATED MODULE: ./esm/AutoSphericalRotor.js\n\n/**\n * マウス操作を監視し、回転を制御するクラス。\n * マウスが無操作の場合、回転を始め、操作が再開されると停止する。\n */\nclass AutoSphericalRotor extends SphericalRotor {\n  constructor(sleepWatcher, cameraController) {\n    super(cameraController);\n    this.sleepWatcher = sleepWatcher;\n    this.isStart = false;\n    this.onSleep = () => {\n      this.rotate(this.loopOption);\n    };\n    this.onWakeup = () => {\n      this.stop();\n    };\n  }\n  /**\n   * マウスの監視を一時停止する\n   * @param [option] option.returnR =　falseの時のみ、アニメーションを行わず原位置でマウス監視が停止する。監視を停止させた後に別のアニメーションでカメラを移動したかったり、元に戻したかったりする場合に使う。\n   */\n  pause(option) {\n    if (!this.isStart) return;\n    this.isStart = false;\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.stopWatcher();\n    this.stop(option);\n  }\n  stopWatcher() {\n    this.sleepWatcher.removeEventListener("sleep", this.onSleep);\n    this.sleepWatcher.removeEventListener("wakeup", this.onWakeup);\n    this.sleepWatcher.stop();\n  }\n  /**\n   * マウスの監視を再開する。\n   * 各種設定はwatch()で指定されたオプションを引き継ぐ。\n   * pause()関数で停止された監視を再開させるための関数。\n   */\n  resume() {\n    if (this.isStart) return;\n    this.isStart = true;\n    this.startWatcher();\n  }\n  /**\n   * マウスの監視を開始する。\n   * @param parameters\n   * @param loopOption\n   */\n  watch(parameters, loopOption) {\n    this.config = parameters;\n    this.loopOption = loopOption;\n    this.isStart = true;\n    this.startWatcher();\n  }\n  startWatcher() {\n    this.stopWatcher();\n    this.sleepWatcher.addEventListener("sleep", this.onSleep);\n    this.sleepWatcher.addEventListener("wakeup", this.onWakeup);\n    this.sleepWatcher.start();\n  }\n}\nAutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION = 30 * 1000;\nAutoSphericalRotor.DEFAULT_LOOP_R_DURATION = 30 * 1000;\n;// CONCATENATED MODULE: ./esm/SphericalRotorConfig.js\n\nclass SphericalRotorConfigUtil {\n  static init(config) {\n    config ??= {};\n    config.loopPhi ??= {};\n    config.loopPhi.duration ??= AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    config.loopTheta ??= {};\n    config.loopTheta.duration ??= AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    config.loopR ??= {};\n    config.loopR.duration ??= AutoSphericalRotor.DEFAULT_LOOP_R_DURATION;\n    return config;\n  }\n  /**\n   * ループアニメーションに必要な情報を、configオブジェクトから取り出す。\n   * @param config\n   * @param type\n   */\n  static extractSphericalParam(config, type) {\n    const getLoopParameter = (config, type) => {\n      switch (type) {\n        case "phi":\n          return config?.loopPhi;\n        case "theta":\n          return config?.loopTheta;\n        case "radius":\n          return config?.loopR;\n      }\n      return undefined;\n    };\n    const param = getLoopParameter(config, type);\n    if (param == null || param.max == null || param.min == null) return undefined;\n    return param;\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-drag-watcher/esm/index.js + 2 modules\nvar threejs_drag_watcher_esm = __webpack_require__(184);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-spherical-controls/esm/index.js + 9 modules\nvar threejs_spherical_controls_esm = __webpack_require__(283);\n;// CONCATENATED MODULE: ./demoSrc/demo.js\n\n\n\n\n\n\nlet scene;\nclass Demo {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      antialias: false\n    });\n    Common.initHelper(scene);\n    const target = threejs_spherical_controls_esm/* SphericalControllerUtil */.r$.generateCameraTarget();\n    scene.add(target);\n    const control = new threejs_spherical_controls_esm/* SphericalController */.R_(camera, target);\n    control.initCameraPosition(new three_module/* Spherical */.$V(100, Math.PI / 2, 0));\n    const dragWatcher = new threejs_drag_watcher_esm/* DragWatcher */.q(renderer.domElement);\n    const sleepWatcher = new threejs_drag_watcher_esm/* SleepWatcher */.E(dragWatcher, {\n      timeOut_ms: 1000\n    });\n    const rotor = new AutoSphericalRotor(sleepWatcher, control);\n    rotor.watch({\n      loopPhi: {\n        min: 0,\n        max: Math.PI\n      },\n      loopTheta: {\n        min: 0,\n        max: Math.PI / 2\n      },\n      loopR: {\n        min: 100 / 3,\n        max: 100\n      },\n      defaultR: 100\n    });\n    esm/* RAFTicker */.F.on("tick", () => {\n      renderer.render(scene, camera);\n    });\n  }\n}\nwindow.onload = () => {\n  new Demo();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WCwyQ0FBVyxDQUFDdEUsUUFBUSxDQUFDVCxVQUFVLENBQUM7SUFDeEQsTUFBTXdELFlBQVksR0FBRyxJQUFJd0IsNENBQVksQ0FBQ1UsV0FBVyxFQUFFO01BQUVDLFVBQVUsRUFBRTtJQUFLLENBQUMsQ0FBQztJQUV4RSxNQUFNQyxLQUFLLEdBQUcsSUFBSXJDLGtCQUFrQixDQUFDQyxZQUFZLEVBQUV2RCxPQUFPLENBQUM7SUFDM0QyRixLQUFLLENBQUMxQixLQUFLLENBQUM7TUFDVkssT0FBTyxFQUFFO1FBQ1AzQixHQUFHLEVBQUUsQ0FBQztRQUNOQyxHQUFHLEVBQUUyQyxJQUFJLENBQUNDO01BQ1osQ0FBQztNQUNEakIsU0FBUyxFQUFFO1FBQ1Q1QixHQUFHLEVBQUUsQ0FBQztRQUNOQyxHQUFHLEVBQUUyQyxJQUFJLENBQUNDLEVBQUUsR0FBRztNQUNqQixDQUFDO01BQ0RoQixLQUFLLEVBQUU7UUFDTDdCLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNaQyxHQUFHLEVBQUU7TUFDUCxDQUFDO01BQ0RPLFFBQVEsRUFBRTtJQUNaLENBQUMsQ0FBQztJQUVGOUIsb0JBQVMsQ0FBQ2lCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTTtNQUN6QjlCLFFBQVEsQ0FBQ1YsTUFBTSxDQUFDYixLQUFLLEVBQUVRLE1BQU0sQ0FBQztJQUNoQyxDQUFDLENBQUM7RUFDSjtBQUNGO0FBRUFzQixNQUFNLENBQUM2RSxNQUFNLEdBQUcsTUFBTTtFQUNwQixJQUFJVixJQUFJLENBQUMsQ0FBQztBQUNaLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLXJvdG9yLy4vZGVtb1NyYy9Db21tb24uanM/MmMwNyIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLXJvdG9yLy4vZXNtL1NwaGVyaWNhbFJvdG9yLmpzP2M3NzQiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLXNwaGVyaWNhbC1yb3Rvci8uL2VzbS9BdXRvU3BoZXJpY2FsUm90b3IuanM/Y2FkNSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLXJvdG9yLy4vZXNtL1NwaGVyaWNhbFJvdG9yQ29uZmlnLmpzPzRhMDEiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLXNwaGVyaWNhbC1yb3Rvci8uL2VzbS9pbmRleC5qcz9iMjM5Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1zcGhlcmljYWwtcm90b3IvLi9kZW1vU3JjL2RlbW8uanM/Mzk5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbWJpZW50TGlnaHQsXG4gIEF4ZXNIZWxwZXIsXG4gIENvbG9yLFxuICBDb25lR2VvbWV0cnksXG4gIE1lc2hCYXNpY01hdGVyaWFsLFxuICBQZXJzcGVjdGl2ZUNhbWVyYSxcbiAgU2NlbmUsXG4gIFdlYkdMUmVuZGVyZXIsXG4gIE1lc2gsXG59IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQ29tbW9uIHtcbiAgc3RhdGljIGluaXRTY2VuZSgpIHtcbiAgICByZXR1cm4gbmV3IFNjZW5lKCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdExpZ2h0KHNjZW5lKSB7XG4gICAgY29uc3QgYW1iaWVudExpZ2h0ID0gbmV3IEFtYmllbnRMaWdodCgweGZmZmZmZiwgMS4wKTtcbiAgICBzY2VuZS5hZGQoYW1iaWVudExpZ2h0KTtcbiAgICByZXR1cm4gYW1iaWVudExpZ2h0O1xuICB9XG5cbiAgc3RhdGljIGluaXRDYW1lcmEoc2NlbmUsIFcsIEgsIG5lYXIgPSAxLCBmYXIgPSA0MDApIHtcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoNDUsIFcgLyBILCBuZWFyLCBmYXIpO1xuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgMTAwKTtcbiAgICBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoZmFsc2UpO1xuICAgIHNjZW5lLmFkZChjYW1lcmEpO1xuICAgIHJldHVybiBjYW1lcmE7XG4gIH1cblxuICBzdGF0aWMgaW5pdENvbnRyb2woY2FtZXJhLCByZW5kZXIpIHtcbiAgICBsZXQgZG9tRWxlbWVudDtcbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICBkb21FbGVtZW50ID0gcmVuZGVyLmRvbUVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2wgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIGRvbUVsZW1lbnQpO1xuICAgIGNvbnRyb2wudXBkYXRlKCk7XG4gICAgcmV0dXJuIGNvbnRyb2w7XG4gIH1cblxuICBzdGF0aWMgaW5pdFJlbmRlcmVyKFcsIEgsIG9wdGlvbikge1xuICAgIG9wdGlvbiA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIGNvbG9yOiAweDAwMDAwMCxcbiAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIG9wdGlvbixcbiAgICApO1xuXG4gICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgV2ViR0xSZW5kZXJlcih7XG4gICAgICBhbnRpYWxpYXM6IG9wdGlvbi5hbnRpYWxpYXMsXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKG5ldyBDb2xvcihvcHRpb24uY29sb3IpKTtcbiAgICByZW5kZXJlci5zZXRTaXplKFcsIEgpO1xuICAgIHJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgIHJldHVybiByZW5kZXJlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0SGVscGVyKHNjZW5lKSB7XG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBBeGVzSGVscGVyKDIwKTtcbiAgICBzY2VuZS5hZGQoYXhlc0hlbHBlcik7XG4gICAgY29uc3QgY29uZSA9IG5ldyBNZXNoKFxuICAgICAgbmV3IENvbmVHZW9tZXRyeSg1LCAxMCwgMTYpLFxuICAgICAgbmV3IE1lc2hCYXNpY01hdGVyaWFsKHsgd2lyZWZyYW1lOiB0cnVlIH0pLFxuICAgICk7XG4gICAgc2NlbmUuYWRkKGNvbmUpO1xuICAgIHJldHVybiBheGVzSGVscGVyO1xuICB9XG59XG4iLCJpbXBvcnQgeyBSQUZUaWNrZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG5pbXBvcnQgeyBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwsIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmV4cG9ydCBjbGFzcyBTcGhlcmljYWxSb3RvciB7XG4gICAgY29uc3RydWN0b3IoY2FtZXJhQ29udHJvbGxlcikge1xuICAgICAgICB0aGlzLmNhbWVyYUNvbnRyb2xsZXIgPSBjYW1lcmFDb250cm9sbGVyO1xuICAgICAgICB0aGlzLmlzUm90YXRpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCq+ODoeODqeOCkuaoquWbnui7ouOBleOBm+OCi1xuICAgICAgICAgKiDlvoDlvqnjgafjga/jgarjgY/nhKHpmZDpgYvli5XjgIJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm90YXRlVGhldGEgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbmZpZz8uc3BlZWQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmNhbWVyYUNvbnRyb2xsZXIuYWRkUG9zaXRpb24oXCJ0aGV0YVwiLCB0aGlzLl9jb25maWcuc3BlZWQgKiAoZS5kZWx0YSAvICgxMDAwIC8gMzApKSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzZXQgY29uZmlnKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gU3BoZXJpY2FsUm90b3JDb25maWdVdGlsLmluaXQocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWbnui7ouOCouODi+ODoeODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAglxuICAgICAqXG4gICAgICogcm90YXRl44Goc3RvcOOBr+WvvuOBrumWouS/guOBp+OBr+OBquOBhOOAgueVsOOBquOCi29wdGlvbuOCkuaMh+WumuOBleOCjOOBn+WgtOWQiOOAgXJvdGF0ZeOBr+ePvueKtuOBruOCouODi+ODoeODvOOCt+ODp+ODs+OCkuS4iuabuOOBjeOBl+OBpuWGjeWun+ihjOOBleOCjOOCi+OAglxuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKi9cbiAgICByb3RhdGUob3B0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUm90YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIC8v5qiq5Zue6LuiXG4gICAgICAgIGlmICh0aGlzLl9jb25maWc/LnNwZWVkICE9IG51bGwpIHtcbiAgICAgICAgICAgIFJBRlRpY2tlci5vbihcInRpY2tcIiwgdGhpcy5yb3RhdGVUaGV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgLy/nuKblvoDlvqnjg6vjg7zjg5dcbiAgICAgICAgdGhpcy5zdGFydFNwaGVyaWNhbENhbWVyYUxvb3AoXCJwaGlcIiwgb3B0aW9uKTtcbiAgICAgICAgLy/mqKrlvoDlvqnjg6vjg7zjg5dcbiAgICAgICAgdGhpcy5zdGFydFNwaGVyaWNhbENhbWVyYUxvb3AoXCJ0aGV0YVwiLCBvcHRpb24pO1xuICAgICAgICAvL+OCuuODvOODoOOCpOODs+OCouOCpuODiOODq+ODvOODl1xuICAgICAgICB0aGlzLnN0YXJ0U3BoZXJpY2FsQ2FtZXJhTG9vcChcInJhZGl1c1wiLCBvcHRpb24pO1xuICAgICAgICB0aGlzLmlzUm90YXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjb25maWfjgqrjg5bjgrjjgqfjgq/jg4jjgYvjgonjgIHnuKbjgIHmqKrjgIHjgrrjg7zjg6Djg6vjg7zjg5fjga7nirbmhYvjgpLlj5bjgorlh7rjgZnjgIJcbiAgICAgKiDoqK3lrprjgZXjgozjgabjgYTjgovloLTlkIjjgIHjg6vjg7zjg5fjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIOe4puOAgeaoquOAgeOCuuODvOODoOOBruOBhOOBmuOCjOOBi1xuICAgICAqIEBwYXJhbSBvcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHN0YXJ0U3BoZXJpY2FsQ2FtZXJhTG9vcCh0eXBlLCBvcHRpb24pIHtcbiAgICAgICAgY29uc3QgbG9vcCA9IFNwaGVyaWNhbFJvdG9yQ29uZmlnVXRpbC5leHRyYWN0U3BoZXJpY2FsUGFyYW0odGhpcy5fY29uZmlnLCB0eXBlKTtcbiAgICAgICAgaWYgKGxvb3AgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5jYW1lcmFDb250cm9sbGVyLmxvb3AodHlwZSwgbG9vcC5taW4sIGxvb3AubWF4LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogbG9vcC5kdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0VGltZTogb3B0aW9uPy5zdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgqvjg6Hjg6njga7lm57ou6LjgpLkuIDmmYLlgZzmraLjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gW29wdGlvbl0gb3B0aW9uLnJldHVyblIgPSBmYWxzZeOBruaZguOAgeOCouODi+ODoeODvOOCt+ODp+ODs+OCkuihjOOCj+OBquOBhOOAglxuICAgICAqL1xuICAgIHN0b3Aob3B0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JvdGF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzUm90YXRpb24gPSBmYWxzZTtcbiAgICAgICAgUkFGVGlja2VyLm9mZihcInRpY2tcIiwgdGhpcy5yb3RhdGVUaGV0YSk7XG4gICAgICAgIHRoaXMuY2FtZXJhQ29udHJvbGxlci50d2VlbnMuc3RvcCgpO1xuICAgICAgICBvcHRpb24gPSBTcGhlcmljYWxSb3Rvci5nZXREZWZhdWx0U3RvcFBhcmFtKG9wdGlvbik7XG4gICAgICAgIHRoaXMucmV0dXJuVG9EZWZhdWx0UihvcHRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgqvjg6Hjg6njgpLjg4fjg5Xjgqnjg6vjg4jkvY3nva7jgb7jgafmiLvjgZlcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIHJldHVyblRvRGVmYXVsdFIob3B0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWc/LmRlZmF1bHRSICE9IG51bGwgJiYgb3B0aW9uPy5yZXR1cm5SID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLmNhbWVyYUNvbnRyb2xsZXIubW92ZVBvc2l0aW9uKFwicmFkaXVzXCIsIHRoaXMuX2NvbmZpZy5kZWZhdWx0Uiwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMzMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVmYXVsdFN0b3BQYXJhbShvcHRpb24pIHtcbiAgICAgICAgb3B0aW9uID8/PSB7fTtcbiAgICAgICAgb3B0aW9uLnJldHVyblIgPz89IHRydWU7XG4gICAgICAgIHJldHVybiBvcHRpb247XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3BoZXJpY2FsUm90b3IsIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbi8qKlxuICog44Oe44Km44K55pON5L2c44KS55uj6KaW44GX44CB5Zue6Lui44KS5Yi25b6h44GZ44KL44Kv44Op44K544CCXG4gKiDjg57jgqbjgrnjgYznhKHmk43kvZzjga7loLTlkIjjgIHlm57ou6LjgpLlp4vjgoHjgIHmk43kvZzjgYzlho3plovjgZXjgozjgovjgajlgZzmraLjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dG9TcGhlcmljYWxSb3RvciBleHRlbmRzIFNwaGVyaWNhbFJvdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihzbGVlcFdhdGNoZXIsIGNhbWVyYUNvbnRyb2xsZXIpIHtcbiAgICAgICAgc3VwZXIoY2FtZXJhQ29udHJvbGxlcik7XG4gICAgICAgIHRoaXMuc2xlZXBXYXRjaGVyID0gc2xlZXBXYXRjaGVyO1xuICAgICAgICB0aGlzLmlzU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vblNsZWVwID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yb3RhdGUodGhpcy5sb29wT3B0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbldha2V1cCA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg57jgqbjgrnjga7nm6PoppbjgpLkuIDmmYLlgZzmraLjgZnjgotcbiAgICAgKiBAcGFyYW0gW29wdGlvbl0gb3B0aW9uLnJldHVyblIgPeOAgGZhbHNl44Gu5pmC44Gu44G/44CB44Ki44OL44Oh44O844K344On44Oz44KS6KGM44KP44Ga5Y6f5L2N572u44Gn44Oe44Km44K555uj6KaW44GM5YGc5q2i44GZ44KL44CC55uj6KaW44KS5YGc5q2i44GV44Gb44Gf5b6M44Gr5Yil44Gu44Ki44OL44Oh44O844K344On44Oz44Gn44Kr44Oh44Op44KS56e75YuV44GX44Gf44GL44Gj44Gf44KK44CB5YWD44Gr5oi744GX44Gf44GL44Gj44Gf44KK44GZ44KL5aC05ZCI44Gr5L2/44GG44CCXG4gICAgICovXG4gICAgcGF1c2Uob3B0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9uID0gU3BoZXJpY2FsUm90b3IuZ2V0RGVmYXVsdFN0b3BQYXJhbShvcHRpb24pO1xuICAgICAgICB0aGlzLnN0b3BXYXRjaGVyKCk7XG4gICAgICAgIHRoaXMuc3RvcChvcHRpb24pO1xuICAgIH1cbiAgICBzdG9wV2F0Y2hlcigpIHtcbiAgICAgICAgdGhpcy5zbGVlcFdhdGNoZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNsZWVwXCIsIHRoaXMub25TbGVlcCk7XG4gICAgICAgIHRoaXMuc2xlZXBXYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3YWtldXBcIiwgdGhpcy5vbldha2V1cCk7XG4gICAgICAgIHRoaXMuc2xlZXBXYXRjaGVyLnN0b3AoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oe44Km44K544Gu55uj6KaW44KS5YaN6ZaL44GZ44KL44CCXG4gICAgICog5ZCE56iu6Kit5a6a44Gvd2F0Y2goKeOBp+aMh+WumuOBleOCjOOBn+OCquODl+OCt+ODp+ODs+OCkuW8leOBjee2meOBkOOAglxuICAgICAqIHBhdXNlKCnplqLmlbDjgaflgZzmraLjgZXjgozjgZ/nm6PoppbjgpLlho3plovjgZXjgZvjgovjgZ/jgoHjga7plqLmlbDjgIJcbiAgICAgKi9cbiAgICByZXN1bWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RhcnQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNTdGFydCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhcnRXYXRjaGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnuOCpuOCueOBruebo+imluOCkumWi+Wni+OBmeOCi+OAglxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIGxvb3BPcHRpb25cbiAgICAgKi9cbiAgICB3YXRjaChwYXJhbWV0ZXJzLCBsb29wT3B0aW9uKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gcGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5sb29wT3B0aW9uID0gbG9vcE9wdGlvbjtcbiAgICAgICAgdGhpcy5pc1N0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydFdhdGNoZXIoKTtcbiAgICB9XG4gICAgc3RhcnRXYXRjaGVyKCkge1xuICAgICAgICB0aGlzLnN0b3BXYXRjaGVyKCk7XG4gICAgICAgIHRoaXMuc2xlZXBXYXRjaGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJzbGVlcFwiLCB0aGlzLm9uU2xlZXApO1xuICAgICAgICB0aGlzLnNsZWVwV2F0Y2hlci5hZGRFdmVudExpc3RlbmVyKFwid2FrZXVwXCIsIHRoaXMub25XYWtldXApO1xuICAgICAgICB0aGlzLnNsZWVwV2F0Y2hlci5zdGFydCgpO1xuICAgIH1cbn1cbkF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfTEFUX0RVUkFUSU9OID0gMzAgKiAxMDAwO1xuQXV0b1NwaGVyaWNhbFJvdG9yLkRFRkFVTFRfTE9PUF9SX0RVUkFUSU9OID0gMzAgKiAxMDAwO1xuIiwiaW1wb3J0IHsgQXV0b1NwaGVyaWNhbFJvdG9yIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmV4cG9ydCBjbGFzcyBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwge1xuICAgIHN0YXRpYyBpbml0KGNvbmZpZykge1xuICAgICAgICBjb25maWcgPz89IHt9O1xuICAgICAgICBjb25maWcubG9vcFBoaSA/Pz0ge307XG4gICAgICAgIGNvbmZpZy5sb29wUGhpLmR1cmF0aW9uID8/PSBBdXRvU3BoZXJpY2FsUm90b3IuREVGQVVMVF9MT09QX0xBVF9EVVJBVElPTjtcbiAgICAgICAgY29uZmlnLmxvb3BUaGV0YSA/Pz0ge307XG4gICAgICAgIGNvbmZpZy5sb29wVGhldGEuZHVyYXRpb24gPz89IEF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfTEFUX0RVUkFUSU9OO1xuICAgICAgICBjb25maWcubG9vcFIgPz89IHt9O1xuICAgICAgICBjb25maWcubG9vcFIuZHVyYXRpb24gPz89IEF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfUl9EVVJBVElPTjtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Or44O844OX44Ki44OL44Oh44O844K344On44Oz44Gr5b+F6KaB44Gq5oOF5aCx44KS44CBY29uZmln44Kq44OW44K444Kn44Kv44OI44GL44KJ5Y+W44KK5Ye644GZ44CCXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEBwYXJhbSB0eXBlXG4gICAgICovXG4gICAgc3RhdGljIGV4dHJhY3RTcGhlcmljYWxQYXJhbShjb25maWcsIHR5cGUpIHtcbiAgICAgICAgY29uc3QgZ2V0TG9vcFBhcmFtZXRlciA9IChjb25maWcsIHR5cGUpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJwaGlcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZz8ubG9vcFBoaTtcbiAgICAgICAgICAgICAgICBjYXNlIFwidGhldGFcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZz8ubG9vcFRoZXRhO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyYWRpdXNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZz8ubG9vcFI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwYXJhbSA9IGdldExvb3BQYXJhbWV0ZXIoY29uZmlnLCB0eXBlKTtcbiAgICAgICAgaWYgKHBhcmFtID09IG51bGwgfHwgcGFyYW0ubWF4ID09IG51bGwgfHwgcGFyYW0ubWluID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vU3BoZXJpY2FsUm90b3IuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0F1dG9TcGhlcmljYWxSb3Rvci5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUm90b3JTdG9wQ29uZmlnLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TcGhlcmljYWxSb3RvckNvbmZpZy5qc1wiO1xuIiwiaW1wb3J0IHsgQ29tbW9uIH0gZnJvbSBcIi4vQ29tbW9uLmpzXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG5pbXBvcnQgeyBGb2csIFNwaGVyaWNhbCB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgQXV0b1NwaGVyaWNhbFJvdG9yIH0gZnJvbSBcIi4uL2VzbS9pbmRleC5qc1wiO1xuaW1wb3J0IHsgRHJhZ1dhdGNoZXIsIFNsZWVwV2F0Y2hlciB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3RocmVlanMtZHJhZy13YXRjaGVyXCI7XG5pbXBvcnQge1xuICBTcGhlcmljYWxDb250cm9sbGVyLFxuICBTcGhlcmljYWxDb250cm9sbGVyVXRpbCxcbn0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vdGhyZWVqcy1zcGhlcmljYWwtY29udHJvbHNcIjtcblxubGV0IHNjZW5lO1xuZXhwb3J0IGNsYXNzIERlbW8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBXID0gNjQwO1xuICAgIGNvbnN0IEggPSA0ODA7XG5cbiAgICBzY2VuZSA9IENvbW1vbi5pbml0U2NlbmUoKTtcbiAgICBzY2VuZS5mb2cgPSBuZXcgRm9nKDB4MDAwMDAwLCA4MCwgMTYwKTtcbiAgICBDb21tb24uaW5pdExpZ2h0KHNjZW5lKTtcbiAgICBjb25zdCBjYW1lcmEgPSBDb21tb24uaW5pdENhbWVyYShzY2VuZSwgVywgSCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBDb21tb24uaW5pdFJlbmRlcmVyKFcsIEgsIHsgYW50aWFsaWFzOiBmYWxzZSB9KTtcblxuICAgIENvbW1vbi5pbml0SGVscGVyKHNjZW5lKTtcblxuICAgIGNvbnN0IHRhcmdldCA9IFNwaGVyaWNhbENvbnRyb2xsZXJVdGlsLmdlbmVyYXRlQ2FtZXJhVGFyZ2V0KCk7XG4gICAgc2NlbmUuYWRkKHRhcmdldCk7XG4gICAgY29uc3QgY29udHJvbCA9IG5ldyBTcGhlcmljYWxDb250cm9sbGVyKGNhbWVyYSwgdGFyZ2V0KTtcblxuICAgIGNvbnRyb2wuaW5pdENhbWVyYVBvc2l0aW9uKG5ldyBTcGhlcmljYWwoMTAwLCBNYXRoLlBJIC8gMiwgMCkpO1xuICAgIGNvbnN0IGRyYWdXYXRjaGVyID0gbmV3IERyYWdXYXRjaGVyKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgIGNvbnN0IHNsZWVwV2F0Y2hlciA9IG5ldyBTbGVlcFdhdGNoZXIoZHJhZ1dhdGNoZXIsIHsgdGltZU91dF9tczogMTAwMCB9KTtcblxuICAgIGNvbnN0IHJvdG9yID0gbmV3IEF1dG9TcGhlcmljYWxSb3RvcihzbGVlcFdhdGNoZXIsIGNvbnRyb2wpO1xuICAgIHJvdG9yLndhdGNoKHtcbiAgICAgIGxvb3BQaGk6IHtcbiAgICAgICAgbWluOiAwLFxuICAgICAgICBtYXg6IE1hdGguUEksXG4gICAgICB9LFxuICAgICAgbG9vcFRoZXRhOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiBNYXRoLlBJIC8gMixcbiAgICAgIH0sXG4gICAgICBsb29wUjoge1xuICAgICAgICBtaW46IDEwMCAvIDMsXG4gICAgICAgIG1heDogMTAwLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHRSOiAxMDAsXG4gICAgfSk7XG5cbiAgICBSQUZUaWNrZXIub24oXCJ0aWNrXCIsICgpID0+IHtcbiAgICAgIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKTtcbiAgICB9KTtcbiAgfVxufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBuZXcgRGVtbygpO1xufTtcbiJdLCJuYW1lcyI6WyJBbWJpZW50TGlnaHQiLCJBeGVzSGVscGVyIiwiQ29sb3IiLCJDb25lR2VvbWV0cnkiLCJNZXNoQmFzaWNNYXRlcmlhbCIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwiU2NlbmUiLCJXZWJHTFJlbmRlcmVyIiwiTWVzaCIsIk9yYml0Q29udHJvbHMiLCJDb21tb24iLCJpbml0U2NlbmUiLCJpbml0TGlnaHQiLCJzY2VuZSIsImFtYmllbnRMaWdodCIsImFkZCIsImluaXRDYW1lcmEiLCJXIiwiSCIsIm5lYXIiLCJmYXIiLCJjYW1lcmEiLCJwb3NpdGlvbiIsInNldCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaW5pdENvbnRyb2wiLCJyZW5kZXIiLCJkb21FbGVtZW50IiwiY29udHJvbCIsInVwZGF0ZSIsImluaXRSZW5kZXJlciIsIm9wdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsImNvbG9yIiwiYW50aWFsaWFzIiwicmVuZGVyZXIiLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsInNldENsZWFyQ29sb3IiLCJzZXRTaXplIiwic2V0UGl4ZWxSYXRpbyIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJpbml0SGVscGVyIiwiYXhlc0hlbHBlciIsImNvbmUiLCJ3aXJlZnJhbWUiLCJSQUZUaWNrZXIiLCJTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwiLCJTcGhlcmljYWxSb3RvciIsImNvbnN0cnVjdG9yIiwiY2FtZXJhQ29udHJvbGxlciIsImlzUm90YXRpb24iLCJyb3RhdGVUaGV0YSIsImUiLCJfY29uZmlnIiwic3BlZWQiLCJhZGRQb3NpdGlvbiIsImRlbHRhIiwiY29uZmlnIiwicGFyYW1ldGVycyIsImluaXQiLCJyb3RhdGUiLCJzdG9wIiwib24iLCJzdGFydFNwaGVyaWNhbENhbWVyYUxvb3AiLCJ0eXBlIiwibG9vcCIsImV4dHJhY3RTcGhlcmljYWxQYXJhbSIsIm1pbiIsIm1heCIsImR1cmF0aW9uIiwic3RhcnRUaW1lIiwib2ZmIiwidHdlZW5zIiwiZ2V0RGVmYXVsdFN0b3BQYXJhbSIsInJldHVyblRvRGVmYXVsdFIiLCJkZWZhdWx0UiIsInJldHVyblIiLCJtb3ZlUG9zaXRpb24iLCJBdXRvU3BoZXJpY2FsUm90b3IiLCJzbGVlcFdhdGNoZXIiLCJpc1N0YXJ0Iiwib25TbGVlcCIsImxvb3BPcHRpb24iLCJvbldha2V1cCIsInBhdXNlIiwic3RvcFdhdGNoZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVzdW1lIiwic3RhcnRXYXRjaGVyIiwid2F0Y2giLCJhZGRFdmVudExpc3RlbmVyIiwic3RhcnQiLCJERUZBVUxUX0xPT1BfTEFUX0RVUkFUSU9OIiwiREVGQVVMVF9MT09QX1JfRFVSQVRJT04iLCJsb29wUGhpIiwibG9vcFRoZXRhIiwibG9vcFIiLCJnZXRMb29wUGFyYW1ldGVyIiwidW5kZWZpbmVkIiwicGFyYW0iLCJGb2ciLCJTcGhlcmljYWwiLCJEcmFnV2F0Y2hlciIsIlNsZWVwV2F0Y2hlciIsIlNwaGVyaWNhbENvbnRyb2xsZXIiLCJTcGhlcmljYWxDb250cm9sbGVyVXRpbCIsIkRlbW8iLCJmb2ciLCJ0YXJnZXQiLCJnZW5lcmF0ZUNhbWVyYVRhcmdldCIsImluaXRDYW1lcmFQb3NpdGlvbiIsIk1hdGgiLCJQSSIsImRyYWdXYXRjaGVyIiwidGltZU91dF9tcyIsInJvdG9yIiwib25sb2FkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///388\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(i=0;i<deferred.length;i++){for(var[U,F,B]=deferred[i],g=!0,C=0;C<U.length;C++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[C])))?U.splice(C--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(i--,1);var s=F();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var i=deferred.length;i>0&&deferred[i-1][2]>B;i--)deferred[i]=deferred[i-1];deferred[i]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={577:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,C,s]=F,i=0;if(g.some((U=>0!==Q[U]))){for(B in C)__webpack_require__.o(C,B)&&(__webpack_require__.m[B]=C[B]);if(s)var c=s(__webpack_require__)}for(U&&U(F);i<g.length;i++)I=g[i],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(c)},F=self.webpackChunk_masatomakino_threejs_spherical_rotor=self.webpackChunk_masatomakino_threejs_spherical_rotor||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(388)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();