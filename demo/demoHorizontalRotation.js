(()=>{"use strict";var __webpack_modules__={243:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Demo\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    return new three_module/* Scene */.xsS();\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      antialias: option.antialias\n    });\n    document.body.appendChild(renderer.domElement);\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(20);\n    scene.add(axesHelper);\n    const cone = new three_module/* Mesh */.Kj0(new three_module/* ConeGeometry */.b_z(5, 10, 16), new three_module/* MeshBasicMaterial */.vBJ({\n      wireframe: true\n    }));\n    scene.add(cone);\n    return axesHelper;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 3 modules\nvar esm = __webpack_require__(571);\n;// CONCATENATED MODULE: ./esm/SphericalRotor.js\n\n\nvar SphericalRotor = /** @class */function () {\n  function SphericalRotor(cameraController) {\n    var _this = this;\n    this.cameraController = cameraController;\n    this.isRotation = false;\n    /**\n     * カメラを横回転させる\n     * 往復ではなく無限運動。\n     */\n    this.rotateTheta = function (e) {\n      if (_this._config.speed == null) return;\n      _this.cameraController.addPosition("theta", _this._config.speed * (e.delta / (1000 / 30)), false, true);\n    };\n  }\n  Object.defineProperty(SphericalRotor.prototype, "config", {\n    set: function (parameters) {\n      this._config = SphericalRotorConfigUtil.init(parameters);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 回転アニメーションを開始する。\n   *\n   * rotateとstopは対の関係ではない。異なるoptionを指定された場合、rotateは現状のアニメーションを上書きして再実行される。\n   * @param option\n   */\n  SphericalRotor.prototype.rotate = function (option) {\n    if (this.isRotation) {\n      this.stop();\n    }\n    //横回転\n    if (this._config.speed != null) {\n      esm/* RAFTicker */.F.on("tick", this.rotateTheta);\n    }\n    //縦往復ループ\n    this.startSphericalCameraLoop("phi", option);\n    //横往復ループ\n    this.startSphericalCameraLoop("theta", option);\n    //ズームインアウトループ\n    this.startSphericalCameraLoop("radius", option);\n    this.isRotation = true;\n  };\n  /**\n   * configオブジェクトから、縦、横、ズームループの状態を取り出す。\n   * 設定されている場合、ループを開始する。\n   *\n   * @param type 縦、横、ズームのいずれか\n   * @param option\n   * @private\n   */\n  SphericalRotor.prototype.startSphericalCameraLoop = function (type, option) {\n    var loop = SphericalRotorConfigUtil.extractSphericalParam(this._config, type);\n    if (loop == null) return;\n    this.cameraController.loop(type, loop.min, loop.max, {\n      duration: loop.duration,\n      startTime: option === null || option === void 0 ? void 0 : option.startTime\n    });\n  };\n  /**\n   * カメラの回転を一時停止する。\n   * @param [option] option.returnR = falseの時、アニメーションを行わない。\n   */\n  SphericalRotor.prototype.stop = function (option) {\n    if (!this.isRotation) return;\n    this.isRotation = false;\n    esm/* RAFTicker */.F.off("tick", this.rotateTheta);\n    this.cameraController.tweens.stop();\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.returnToDefaultR(option);\n  };\n  /**\n   * カメラをデフォルト位置まで戻す\n   * @param option\n   * @protected\n   */\n  SphericalRotor.prototype.returnToDefaultR = function (option) {\n    var _a;\n    if (((_a = this._config) === null || _a === void 0 ? void 0 : _a.defaultR) != null && (option === null || option === void 0 ? void 0 : option.returnR) === true) {\n      this.cameraController.movePosition("radius", this._config.defaultR, {\n        duration: 333\n      });\n    }\n  };\n  SphericalRotor.getDefaultStopParam = function (option) {\n    var _a;\n    option !== null && option !== void 0 ? option : option = {};\n    (_a = option.returnR) !== null && _a !== void 0 ? _a : option.returnR = true;\n    return option;\n  };\n  return SphericalRotor;\n}();\n\n;// CONCATENATED MODULE: ./esm/AutoSphericalRotor.js\nvar __extends = undefined && undefined.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\n/**\n * マウス操作を監視し、回転を制御するクラス。\n * マウスが無操作の場合、回転を始め、操作が再開されると停止する。\n */\nvar AutoSphericalRotor = /** @class */function (_super) {\n  __extends(AutoSphericalRotor, _super);\n  function AutoSphericalRotor(sleepWatcher, cameraController) {\n    var _this = _super.call(this, cameraController) || this;\n    _this.sleepWatcher = sleepWatcher;\n    _this.isStart = false;\n    _this.onSleep = function () {\n      _this.rotate(_this.loopOption);\n    };\n    _this.onWakeup = function () {\n      _this.stop();\n    };\n    return _this;\n  }\n  /**\n   * マウスの監視を一時停止する\n   * @param [option] option.returnR =　falseの時のみ、アニメーションを行わず原位置でマウス監視が停止する。監視を停止させた後に別のアニメーションでカメラを移動したかったり、元に戻したかったりする場合に使う。\n   */\n  AutoSphericalRotor.prototype.pause = function (option) {\n    if (!this.isStart) return;\n    this.isStart = false;\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.stopWatcher();\n    this.stop(option);\n  };\n  AutoSphericalRotor.prototype.stopWatcher = function () {\n    this.sleepWatcher.removeEventListener("sleep", this.onSleep);\n    this.sleepWatcher.removeEventListener("wakeup", this.onWakeup);\n    this.sleepWatcher.stop();\n  };\n  /**\n   * マウスの監視を再開する。\n   * 各種設定はwatch()で指定されたオプションを引き継ぐ。\n   * pause()関数で停止された監視を再開させるための関数。\n   */\n  AutoSphericalRotor.prototype.resume = function () {\n    if (this.isStart) return;\n    this.isStart = true;\n    this.startWatcher();\n  };\n  /**\n   * マウスの監視を開始する。\n   * @param parameters\n   * @param loopOption\n   */\n  AutoSphericalRotor.prototype.watch = function (parameters, loopOption) {\n    this.config = parameters;\n    this.loopOption = loopOption;\n    this.isStart = true;\n    this.startWatcher();\n  };\n  AutoSphericalRotor.prototype.startWatcher = function () {\n    this.stopWatcher();\n    this.sleepWatcher.addEventListener("sleep", this.onSleep);\n    this.sleepWatcher.addEventListener("wakeup", this.onWakeup);\n    this.sleepWatcher.start();\n  };\n  AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION = 30 * 1000;\n  AutoSphericalRotor.DEFAULT_LOOP_R_DURATION = 30 * 1000;\n  return AutoSphericalRotor;\n}(SphericalRotor);\n\n;// CONCATENATED MODULE: ./esm/SphericalRotorConfig.js\n\nvar SphericalRotorConfigUtil = /** @class */function () {\n  function SphericalRotorConfigUtil() {}\n  SphericalRotorConfigUtil.init = function (config) {\n    var _a, _b, _c, _d, _e, _f;\n    var _g, _h, _j;\n    config !== null && config !== void 0 ? config : config = {};\n    (_a = config.loopPhi) !== null && _a !== void 0 ? _a : config.loopPhi = {};\n    (_b = (_g = config.loopPhi).duration) !== null && _b !== void 0 ? _b : _g.duration = AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    (_c = config.loopTheta) !== null && _c !== void 0 ? _c : config.loopTheta = {};\n    (_d = (_h = config.loopTheta).duration) !== null && _d !== void 0 ? _d : _h.duration = AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    (_e = config.loopR) !== null && _e !== void 0 ? _e : config.loopR = {};\n    (_f = (_j = config.loopR).duration) !== null && _f !== void 0 ? _f : _j.duration = AutoSphericalRotor.DEFAULT_LOOP_R_DURATION;\n    return config;\n  };\n  /**\n   * ループアニメーションに必要な情報を、configオブジェクトから取り出す。\n   * @param config\n   * @param type\n   */\n  SphericalRotorConfigUtil.extractSphericalParam = function (config, type) {\n    var getLoopParameter = function (config, type) {\n      switch (type) {\n        case "phi":\n          return config.loopPhi;\n        case "theta":\n          return config.loopTheta;\n        case "radius":\n          return config.loopR;\n      }\n      return null;\n    };\n    var param = getLoopParameter(config, type);\n    if (param == null || param.max == null || param.min == null) return null;\n    return param;\n  };\n  return SphericalRotorConfigUtil;\n}();\n\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-drag-watcher/esm/index.js + 2 modules\nvar threejs_drag_watcher_esm = __webpack_require__(184);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-spherical-controls/esm/index.js + 9 modules\nvar threejs_spherical_controls_esm = __webpack_require__(283);\n;// CONCATENATED MODULE: ./demoSrc/demoHorizontalRotation.js\n\n\n\n\n\n\nlet scene;\nclass Demo {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      antialias: false\n    });\n    Common.initHelper(scene);\n    const target = threejs_spherical_controls_esm/* SphericalControllerUtil */.r$.generateCameraTarget();\n    scene.add(target);\n    const control = new threejs_spherical_controls_esm/* SphericalController */.R_(camera, target);\n    control.initCameraPosition(new three_module/* Spherical */.$V(100, Math.PI / 2, 0));\n    const dragWatcher = new threejs_drag_watcher_esm/* DragWatcher */.q(renderer.domElement);\n    const sleepWatcher = new threejs_drag_watcher_esm/* SleepWatcher */.E(dragWatcher, {\n      timeOut_ms: 1000\n    });\n    const rotor = new AutoSphericalRotor(sleepWatcher, control);\n    rotor.watch({\n      speed: 0.005,\n      loopPhi: {\n        min: 0,\n        max: Math.PI\n      },\n      loopR: {\n        min: 100 / 3,\n        max: 100\n      },\n      defaultR: 100\n    });\n    esm/* RAFTicker */.F.on("tick", () => {\n      renderer.render(scene, camera);\n    });\n  }\n}\nwindow.onload = () => {\n  new Demo();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBVWU7QUFDMkQ7QUFFbkUsTUFBTVUsTUFBTSxDQUFDO0VBQ2xCLE9BQU9DLFNBQVNBLENBQUEsRUFBRztJQUNqQixPQUFPLElBQUlMLDJCQUFLLENBQUMsQ0FBQztFQUNwQjtFQUVBLE9BQU9NLFNBQVNBLENBQUNDLEtBQUssRUFBRTtJQUN0QixNQUFNQyxZQUFZLEdBQUcsSUFBSWQsa0NBQVksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQ3BEYSxLQUFLLENBQUNFLEdBQUcsQ0FBQ0QsWUFBWSxDQUFDO0lBQ3ZCLE9BQU9BLFlBQVk7RUFDckI7RUFFQSxPQUFPRSxVQUFVQSxDQUFDSCxLQUFLLEVBQUVJLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxFQUFFQyxHQUFHLEdBQUcsR0FBRyxFQUFFO0lBQ2xELE1BQU1DLE1BQU0sR0FBRyxJQUFJaEIsdUNBQWlCLENBQUMsRUFBRSxFQUFFWSxDQUFDLEdBQUdDLENBQUMsRUFBRUMsSUFBSSxFQUFFQyxHQUFHLENBQUM7SUFDMURDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUM7SUFDOUJGLE1BQU0sQ0FBQ0csaUJBQWlCLENBQUMsS0FBSyxDQUFDO0lBQy9CWCxLQUFLLENBQUNFLEdBQUcsQ0FBQ00sTUFBTSxDQUFDO0lBQ2pCLE9BQU9BLE1BQU07RUFDZjtFQUVBLE9BQU9JLFdBQVdBLENBQUNKLE1BQU0sRUFBRUssTUFBTSxFQUFFO0lBQ2pDLElBQUlDLFVBQVU7SUFDZCxJQUFJRCxNQUFNLEVBQUU7TUFDVkMsVUFBVSxHQUFHRCxNQUFNLENBQUNDLFVBQVU7SUFDaEM7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSW5CLGtDQUFhLENBQUNZLE1BQU0sRUFBRU0sVUFBVSxDQUFDO0lBQ3JEQyxPQUFPLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hCLE9BQU9ELE9BQU87RUFDaEI7RUFFQSxPQUFPRSxZQUFZQSxDQUFDYixDQUFDLEVBQUVDLENBQUMsRUFBRWEsTUFBTSxFQUFFO0lBQ2hDQSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUNwQjtNQUNFQyxLQUFLLEVBQUUsUUFBUTtNQUNmQyxTQUFTLEVBQUU7SUFDYixDQUFDLEVBQ0RKLE1BQ0YsQ0FBQztJQUVELE1BQU1LLFFBQVEsR0FBRyxJQUFJN0IsbUNBQWEsQ0FBQztNQUNqQzRCLFNBQVMsRUFBRUosTUFBTSxDQUFDSTtJQUNwQixDQUFDLENBQUM7SUFDRkUsUUFBUSxDQUFDQyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDVCxVQUFVLENBQUM7SUFDOUNTLFFBQVEsQ0FBQ0ksYUFBYSxDQUFDLElBQUl0QywyQkFBSyxDQUFDNkIsTUFBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQztJQUMvQ0UsUUFBUSxDQUFDSyxPQUFPLENBQUN4QixDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUN0QmtCLFFBQVEsQ0FBQ00sYUFBYSxDQUFDQyxNQUFNLENBQUNDLGdCQUFnQixDQUFDO0lBQy9DLE9BQU9SLFFBQVE7RUFDakI7RUFFQSxPQUFPUyxVQUFVQSxDQUFDaEMsS0FBSyxFQUFFO0lBQ3ZCLE1BQU1pQyxVQUFVLEdBQUcsSUFBSTdDLGdDQUFVLENBQUMsRUFBRSxDQUFDO0lBQ3JDWSxLQUFLLENBQUNFLEdBQUcsQ0FBQytCLFVBQVUsQ0FBQztJQUNyQixNQUFNQyxJQUFJLEdBQUcsSUFBSXZDLDBCQUFJLENBQ25CLElBQUlMLGtDQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFDM0IsSUFBSUMsdUNBQWlCLENBQUM7TUFBRTRDLFNBQVMsRUFBRTtJQUFLLENBQUMsQ0FDM0MsQ0FBQztJQUNEbkMsS0FBSyxDQUFDRSxHQUFHLENBQUNnQyxJQUFJLENBQUM7SUFDZixPQUFPRCxVQUFVO0VBQ25CO0FBQ0YsQzs7OztBQ3ZFK0M7QUFDTTtBQUNyRCxJQUFJSyxjQUFjLEdBQUcsYUFBZSxZQUFZO0VBQzVDLFNBQVNBLGNBQWNBLENBQUNDLGdCQUFnQixFQUFFO0lBQ3RDLElBQUlDLEtBQUssR0FBRyxJQUFJO0lBQ2hCLElBQUksQ0FBQ0QsZ0JBQWdCLEdBQUdBLGdCQUFnQjtJQUN4QyxJQUFJLENBQUNFLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCO0FBQ1I7QUFDQTtBQUNBO0lBQ1EsSUFBSSxDQUFDQyxXQUFXLEdBQUcsVUFBVUMsQ0FBQyxFQUFFO01BQzVCLElBQUlILEtBQUssQ0FBQ0ksT0FBTyxDQUFDQyxLQUFLLElBQUksSUFBSSxFQUMzQjtNQUNKTCxLQUFLLENBQUNELGdCQUFnQixDQUFDTyxXQUFXLENBQUMsT0FBTyxFQUFFTixLQUFLLENBQUNJLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJRixDQUFDLENBQUNJLEtBQUssSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDO0lBQzNHLENBQUM7RUFDTDtFQUNBNUIsTUFBTSxDQUFDNkIsY0FBYyxDQUFDVixjQUFjLENBQUNXLFNBQVMsRUFBRSxRQUFRLEVBQUU7SUFDdER2QyxHQUFHLEVBQUUsU0FBQUEsQ0FBVXdDLFVBQVUsRUFBRTtNQUN2QixJQUFJLENBQUNOLE9BQU8sR0FBR1Isd0JBQXdCLENBQUNlLElBQUksQ0FBQ0QsVUFBVSxDQUFDO0lBQzVELENBQUM7SUFDREUsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFlBQVksRUFBRTtFQUNsQixDQUFDLENBQUM7RUFDRjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSWYsY0FBYyxDQUFDVyxTQUFTLENBQUNLLE1BQU0sR0FBRyxVQUFVcEMsTUFBTSxFQUFFO0lBQ2hELElBQUksSUFBSSxDQUFDdUIsVUFBVSxFQUFFO01BQ2pCLElBQUksQ0FBQ2MsSUFBSSxDQUFDLENBQUM7SUFDZjtJQUNBO0lBQ0EsSUFBSSxJQUFJLENBQUNYLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJLElBQUksRUFBRTtNQUM1QlIsb0JBQVMsQ0FBQ21CLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDZCxXQUFXLENBQUM7SUFDMUM7SUFDQTtJQUNBLElBQUksQ0FBQ2Usd0JBQXdCLENBQUMsS0FBSyxFQUFFdkMsTUFBTSxDQUFDO0lBQzVDO0lBQ0EsSUFBSSxDQUFDdUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFdkMsTUFBTSxDQUFDO0lBQzlDO0lBQ0EsSUFBSSxDQUFDdUMsd0JBQXdCLENBQUMsUUFBUSxFQUFFdkMsTUFBTSxDQUFDO0lBQy9DLElBQUksQ0FBQ3VCLFVBQVUsR0FBRyxJQUFJO0VBQzFCLENBQUM7RUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lILGNBQWMsQ0FBQ1csU0FBUyxDQUFDUSx3QkFBd0IsR0FBRyxVQUFVQyxJQUFJLEVBQUV4QyxNQUFNLEVBQUU7SUFDeEUsSUFBSXlDLElBQUksR0FBR3ZCLHdCQUF3QixDQUFDd0IscUJBQXFCLENBQUMsSUFBSSxDQUFDaEIsT0FBTyxFQUFFYyxJQUFJLENBQUM7SUFDN0UsSUFBSUMsSUFBSSxJQUFJLElBQUksRUFDWjtJQUNKLElBQUksQ0FBQ3BCLGdCQUFnQixDQUFDb0IsSUFBSSxDQUFDRCxJQUFJLEVBQUVDLElBQUksQ0FBQ0UsR0FBRyxFQUFFRixJQUFJLENBQUNHLEdBQUcsRUFBRTtNQUNqREMsUUFBUSxFQUFFSixJQUFJLENBQUNJLFFBQVE7TUFDdkJDLFNBQVMsRUFBRTlDLE1BQU0sS0FBSyxJQUFJLElBQUlBLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsTUFBTSxDQUFDOEM7SUFDdEUsQ0FBQyxDQUFDO0VBQ04sQ0FBQztFQUNEO0FBQ0o7QUFDQTtBQUNBO0VBQ0kxQixjQUFjLENBQUNXLFNBQVMsQ0FBQ00sSUFBSSxHQUFHLFVBQVVyQyxNQUFNLEVBQUU7SUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQ3VCLFVBQVUsRUFDaEI7SUFDSixJQUFJLENBQUNBLFVBQVUsR0FBRyxLQUFLO0lBQ3ZCSixvQkFBUyxDQUFDNEIsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUN2QixXQUFXLENBQUM7SUFDdkMsSUFBSSxDQUFDSCxnQkFBZ0IsQ0FBQzJCLE1BQU0sQ0FBQ1gsSUFBSSxDQUFDLENBQUM7SUFDbkNyQyxNQUFNLEdBQUdvQixjQUFjLENBQUM2QixtQkFBbUIsQ0FBQ2pELE1BQU0sQ0FBQztJQUNuRCxJQUFJLENBQUNrRCxnQkFBZ0IsQ0FBQ2xELE1BQU0sQ0FBQztFQUNqQyxDQUFDO0VBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJb0IsY0FBYyxDQUFDVyxTQUFTLENBQUNtQixnQkFBZ0IsR0FBRyxVQUFVbEQsTUFBTSxFQUFFO0lBQzFELElBQUltRCxFQUFFO0lBQ04sSUFBSSxDQUFDLENBQUNBLEVBQUUsR0FBRyxJQUFJLENBQUN6QixPQUFPLE1BQU0sSUFBSSxJQUFJeUIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNDLFFBQVEsS0FBSyxJQUFJLElBQUksQ0FBQ3BELE1BQU0sS0FBSyxJQUFJLElBQUlBLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsTUFBTSxDQUFDcUQsT0FBTyxNQUFNLElBQUksRUFBRTtNQUM3SixJQUFJLENBQUNoQyxnQkFBZ0IsQ0FBQ2lDLFlBQVksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDNUIsT0FBTyxDQUFDMEIsUUFBUSxFQUFFO1FBQ2hFUCxRQUFRLEVBQUU7TUFDZCxDQUFDLENBQUM7SUFDTjtFQUNKLENBQUM7RUFDRHpCLGNBQWMsQ0FBQzZCLG1CQUFtQixHQUFHLFVBQVVqRCxNQUFNLEVBQUU7SUFDbkQsSUFBSW1ELEVBQUU7SUFDTm5ELE1BQU0sS0FBSyxJQUFJLElBQUlBLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBR0EsTUFBTSxHQUFJQSxNQUFNLEdBQUcsQ0FBQyxDQUFFO0lBQzdELENBQUNtRCxFQUFFLEdBQUduRCxNQUFNLENBQUNxRCxPQUFPLE1BQU0sSUFBSSxJQUFJRixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBSW5ELE1BQU0sQ0FBQ3FELE9BQU8sR0FBRyxJQUFLO0lBQzlFLE9BQU9yRCxNQUFNO0VBQ2pCLENBQUM7RUFDRCxPQUFPb0IsY0FBYztBQUN6QixDQUFDLENBQUMsQ0FBRTs7O0FDaEdKLElBQUltQyxTQUFTLEdBQUksU0FBSSxJQUFJLFNBQUksQ0FBQ0EsU0FBUyxJQUFNLFlBQVk7RUFDckQsSUFBSUMsYUFBYSxHQUFHLFNBQUFBLENBQVVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFO0lBQ2hDRixhQUFhLEdBQUd2RCxNQUFNLENBQUMwRCxjQUFjLElBQ2hDO01BQUVDLFNBQVMsRUFBRTtJQUFHLENBQUMsWUFBWUMsS0FBSyxJQUFJLFVBQVVKLENBQUMsRUFBRUMsQ0FBQyxFQUFFO01BQUVELENBQUMsQ0FBQ0csU0FBUyxHQUFHRixDQUFDO0lBQUUsQ0FBRSxJQUM1RSxVQUFVRCxDQUFDLEVBQUVDLENBQUMsRUFBRTtNQUFFLEtBQUssSUFBSUksQ0FBQyxJQUFJSixDQUFDLEVBQUUsSUFBSXpELE1BQU0sQ0FBQzhCLFNBQVMsQ0FBQ2dDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDTixDQUFDLEVBQUVJLENBQUMsQ0FBQyxFQUFFTCxDQUFDLENBQUNLLENBQUMsQ0FBQyxHQUFHSixDQUFDLENBQUNJLENBQUMsQ0FBQztJQUFFLENBQUM7SUFDckcsT0FBT04sYUFBYSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsQ0FBQztFQUM5QixDQUFDO0VBQ0QsT0FBTyxVQUFVRCxDQUFDLEVBQUVDLENBQUMsRUFBRTtJQUNuQixJQUFJLE9BQU9BLENBQUMsS0FBSyxVQUFVLElBQUlBLENBQUMsS0FBSyxJQUFJLEVBQ3JDLE1BQU0sSUFBSU8sU0FBUyxDQUFDLHNCQUFzQixHQUFHQyxNQUFNLENBQUNSLENBQUMsQ0FBQyxHQUFHLCtCQUErQixDQUFDO0lBQzdGRixhQUFhLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQ25CLFNBQVNTLEVBQUVBLENBQUEsRUFBRztNQUFFLElBQUksQ0FBQ0MsV0FBVyxHQUFHWCxDQUFDO0lBQUU7SUFDdENBLENBQUMsQ0FBQzFCLFNBQVMsR0FBRzJCLENBQUMsS0FBSyxJQUFJLEdBQUd6RCxNQUFNLENBQUNvRSxNQUFNLENBQUNYLENBQUMsQ0FBQyxJQUFJUyxFQUFFLENBQUNwQyxTQUFTLEdBQUcyQixDQUFDLENBQUMzQixTQUFTLEVBQUUsSUFBSW9DLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDeEYsQ0FBQztBQUNMLENBQUMsQ0FBRSxDQUFDO0FBQ2dDO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUcsa0JBQWtCLEdBQUcsYUFBZSxVQUFVQyxNQUFNLEVBQUU7RUFDdERoQixTQUFTLENBQUNlLGtCQUFrQixFQUFFQyxNQUFNLENBQUM7RUFDckMsU0FBU0Qsa0JBQWtCQSxDQUFDRSxZQUFZLEVBQUVuRCxnQkFBZ0IsRUFBRTtJQUN4RCxJQUFJQyxLQUFLLEdBQUdpRCxNQUFNLENBQUNQLElBQUksQ0FBQyxJQUFJLEVBQUUzQyxnQkFBZ0IsQ0FBQyxJQUFJLElBQUk7SUFDdkRDLEtBQUssQ0FBQ2tELFlBQVksR0FBR0EsWUFBWTtJQUNqQ2xELEtBQUssQ0FBQ21ELE9BQU8sR0FBRyxLQUFLO0lBQ3JCbkQsS0FBSyxDQUFDb0QsT0FBTyxHQUFHLFlBQVk7TUFDeEJwRCxLQUFLLENBQUNjLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDcUQsVUFBVSxDQUFDO0lBQ2xDLENBQUM7SUFDRHJELEtBQUssQ0FBQ3NELFFBQVEsR0FBRyxZQUFZO01BQ3pCdEQsS0FBSyxDQUFDZSxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBQ0QsT0FBT2YsS0FBSztFQUNoQjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0lnRCxrQkFBa0IsQ0FBQ3ZDLFNBQVMsQ0FBQzhDLEtBQUssR0FBRyxVQUFVN0UsTUFBTSxFQUFFO0lBQ25ELElBQUksQ0FBQyxJQUFJLENBQUN5RSxPQUFPLEVBQ2I7SUFDSixJQUFJLENBQUNBLE9BQU8sR0FBRyxLQUFLO0lBQ3BCekUsTUFBTSxHQUFHb0IsY0FBYyxDQUFDNkIsbUJBQW1CLENBQUNqRCxNQUFNLENBQUM7SUFDbkQsSUFBSSxDQUFDOEUsV0FBVyxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDekMsSUFBSSxDQUFDckMsTUFBTSxDQUFDO0VBQ3JCLENBQUM7RUFDRHNFLGtCQUFrQixDQUFDdkMsU0FBUyxDQUFDK0MsV0FBVyxHQUFHLFlBQVk7SUFDbkQsSUFBSSxDQUFDTixZQUFZLENBQUNPLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUNMLE9BQU8sQ0FBQztJQUM1RCxJQUFJLENBQUNGLFlBQVksQ0FBQ08sbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ0gsUUFBUSxDQUFDO0lBQzlELElBQUksQ0FBQ0osWUFBWSxDQUFDbkMsSUFBSSxDQUFDLENBQUM7RUFDNUIsQ0FBQztFQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSWlDLGtCQUFrQixDQUFDdkMsU0FBUyxDQUFDaUQsTUFBTSxHQUFHLFlBQVk7SUFDOUMsSUFBSSxJQUFJLENBQUNQLE9BQU8sRUFDWjtJQUNKLElBQUksQ0FBQ0EsT0FBTyxHQUFHLElBQUk7SUFDbkIsSUFBSSxDQUFDUSxZQUFZLENBQUMsQ0FBQztFQUN2QixDQUFDO0VBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtFQUNJWCxrQkFBa0IsQ0FBQ3ZDLFNBQVMsQ0FBQ21ELEtBQUssR0FBRyxVQUFVbEQsVUFBVSxFQUFFMkMsVUFBVSxFQUFFO0lBQ25FLElBQUksQ0FBQ1EsTUFBTSxHQUFHbkQsVUFBVTtJQUN4QixJQUFJLENBQUMyQyxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDRixPQUFPLEdBQUcsSUFBSTtJQUNuQixJQUFJLENBQUNRLFlBQVksQ0FBQyxDQUFDO0VBQ3ZCLENBQUM7RUFDRFgsa0JBQWtCLENBQUN2QyxTQUFTLENBQUNrRCxZQUFZLEdBQUcsWUFBWTtJQUNwRCxJQUFJLENBQUNILFdBQVcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksQ0FBQ04sWUFBWSxDQUFDWSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDVixPQUFPLENBQUM7SUFDekQsSUFBSSxDQUFDRixZQUFZLENBQUNZLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUNSLFFBQVEsQ0FBQztJQUMzRCxJQUFJLENBQUNKLFlBQVksQ0FBQ2EsS0FBSyxDQUFDLENBQUM7RUFDN0IsQ0FBQztFQUNEZixrQkFBa0IsQ0FBQ2dCLHlCQUF5QixHQUFHLEVBQUUsR0FBRyxJQUFJO0VBQ3hEaEIsa0JBQWtCLENBQUNpQix1QkFBdUIsR0FBRyxFQUFFLEdBQUcsSUFBSTtFQUN0RCxPQUFPakIsa0JBQWtCO0FBQzdCLENBQUMsQ0FBQ2xELGNBQWMsQ0FBRTs7O0FDbEZzQjtBQUN4QyxJQUFJRix3QkFBd0IsR0FBRyxhQUFlLFlBQVk7RUFDdEQsU0FBU0Esd0JBQXdCQSxDQUFBLEVBQUcsQ0FDcEM7RUFDQUEsd0JBQXdCLENBQUNlLElBQUksR0FBRyxVQUFVa0QsTUFBTSxFQUFFO0lBQzlDLElBQUloQyxFQUFFLEVBQUVxQyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUU7SUFDMUIsSUFBSUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLEVBQUU7SUFDZFosTUFBTSxLQUFLLElBQUksSUFBSUEsTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxNQUFNLEdBQUlBLE1BQU0sR0FBRyxDQUFDLENBQUU7SUFDN0QsQ0FBQ2hDLEVBQUUsR0FBR2dDLE1BQU0sQ0FBQ2EsT0FBTyxNQUFNLElBQUksSUFBSTdDLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBR0EsRUFBRSxHQUFJZ0MsTUFBTSxDQUFDYSxPQUFPLEdBQUcsQ0FBQyxDQUFFO0lBQzVFLENBQUNSLEVBQUUsR0FBRyxDQUFDSyxFQUFFLEdBQUdWLE1BQU0sQ0FBQ2EsT0FBTyxFQUFFbkQsUUFBUSxNQUFNLElBQUksSUFBSTJDLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBR0EsRUFBRSxHQUFJSyxFQUFFLENBQUNoRCxRQUFRLEdBQUd5QixrQkFBa0IsQ0FBQ2dCLHlCQUEwQjtJQUNuSSxDQUFDRyxFQUFFLEdBQUdOLE1BQU0sQ0FBQ2MsU0FBUyxNQUFNLElBQUksSUFBSVIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUlOLE1BQU0sQ0FBQ2MsU0FBUyxHQUFHLENBQUMsQ0FBRTtJQUNoRixDQUFDUCxFQUFFLEdBQUcsQ0FBQ0ksRUFBRSxHQUFHWCxNQUFNLENBQUNjLFNBQVMsRUFBRXBELFFBQVEsTUFBTSxJQUFJLElBQUk2QyxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUdBLEVBQUUsR0FBSUksRUFBRSxDQUFDakQsUUFBUSxHQUFHeUIsa0JBQWtCLENBQUNnQix5QkFBMEI7SUFDckksQ0FBQ0ssRUFBRSxHQUFHUixNQUFNLENBQUNlLEtBQUssTUFBTSxJQUFJLElBQUlQLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBR0EsRUFBRSxHQUFJUixNQUFNLENBQUNlLEtBQUssR0FBRyxDQUFDLENBQUU7SUFDeEUsQ0FBQ04sRUFBRSxHQUFHLENBQUNHLEVBQUUsR0FBR1osTUFBTSxDQUFDZSxLQUFLLEVBQUVyRCxRQUFRLE1BQU0sSUFBSSxJQUFJK0MsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUlHLEVBQUUsQ0FBQ2xELFFBQVEsR0FBR3lCLGtCQUFrQixDQUFDaUIsdUJBQXdCO0lBQy9ILE9BQU9KLE1BQU07RUFDakIsQ0FBQztFQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSWpFLHdCQUF3QixDQUFDd0IscUJBQXFCLEdBQUcsVUFBVXlDLE1BQU0sRUFBRTNDLElBQUksRUFBRTtJQUNyRSxJQUFJMkQsZ0JBQWdCLEdBQUcsU0FBQUEsQ0FBVWhCLE1BQU0sRUFBRTNDLElBQUksRUFBRTtNQUMzQyxRQUFRQSxJQUFJO1FBQ1IsS0FBSyxLQUFLO1VBQ04sT0FBTzJDLE1BQU0sQ0FBQ2EsT0FBTztRQUN6QixLQUFLLE9BQU87VUFDUixPQUFPYixNQUFNLENBQUNjLFNBQVM7UUFDM0IsS0FBSyxRQUFRO1VBQ1QsT0FBT2QsTUFBTSxDQUFDZSxLQUFLO01BQzNCO01BQ0EsT0FBTyxJQUFJO0lBQ2YsQ0FBQztJQUNELElBQUlFLEtBQUssR0FBR0QsZ0JBQWdCLENBQUNoQixNQUFNLEVBQUUzQyxJQUFJLENBQUM7SUFDMUMsSUFBSTRELEtBQUssSUFBSSxJQUFJLElBQUlBLEtBQUssQ0FBQ3hELEdBQUcsSUFBSSxJQUFJLElBQUl3RCxLQUFLLENBQUN6RCxHQUFHLElBQUksSUFBSSxFQUN2RCxPQUFPLElBQUk7SUFDZixPQUFPeUQsS0FBSztFQUNoQixDQUFDO0VBQ0QsT0FBT2xGLHdCQUF3QjtBQUNuQyxDQUFDLENBQUMsQ0FBRTs7O0FDdkM2QjtBQUNJO0FBQ0g7Ozs7Ozs7QUNGQTtBQUNtQjtBQUNkO0FBQ0M7QUFDdUM7QUFJN0I7QUFFbEQsSUFBSXBDLEtBQUs7QUFDRixNQUFNNkgsSUFBSSxDQUFDO0VBQ2hCdkMsV0FBV0EsQ0FBQSxFQUFHO0lBQ1osTUFBTWxGLENBQUMsR0FBRyxHQUFHO0lBQ2IsTUFBTUMsQ0FBQyxHQUFHLEdBQUc7SUFFYkwsS0FBSyxHQUFHSCxNQUFNLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQzFCRSxLQUFLLENBQUM4SCxHQUFHLEdBQUcsSUFBSVAseUJBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztJQUN0QzFILE1BQU0sQ0FBQ0UsU0FBUyxDQUFDQyxLQUFLLENBQUM7SUFDdkIsTUFBTVEsTUFBTSxHQUFHWCxNQUFNLENBQUNNLFVBQVUsQ0FBQ0gsS0FBSyxFQUFFSSxDQUFDLEVBQUVDLENBQUMsQ0FBQztJQUM3QyxNQUFNa0IsUUFBUSxHQUFHMUIsTUFBTSxDQUFDb0IsWUFBWSxDQUFDYixDQUFDLEVBQUVDLENBQUMsRUFBRTtNQUFFaUIsU0FBUyxFQUFFO0lBQU0sQ0FBQyxDQUFDO0lBRWhFekIsTUFBTSxDQUFDbUMsVUFBVSxDQUFDaEMsS0FBSyxDQUFDO0lBRXhCLE1BQU0rSCxNQUFNLEdBQUdILDhEQUF1QixDQUFDSSxvQkFBb0IsQ0FBQyxDQUFDO0lBQzdEaEksS0FBSyxDQUFDRSxHQUFHLENBQUM2SCxNQUFNLENBQUM7SUFDakIsTUFBTWhILE9BQU8sR0FBRyxJQUFJNEcsMERBQW1CLENBQUNuSCxNQUFNLEVBQUV1SCxNQUFNLENBQUM7SUFFdkRoSCxPQUFPLENBQUNrSCxrQkFBa0IsQ0FBQyxJQUFJVCw4QkFBUyxDQUFDLEdBQUcsRUFBRVUsSUFBSSxDQUFDQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlELE1BQU1DLFdBQVcsR0FBRyxJQUFJWCwyQ0FBVyxDQUFDbEcsUUFBUSxDQUFDVCxVQUFVLENBQUM7SUFDeEQsTUFBTTRFLFlBQVksR0FBRyxJQUFJZ0MsNENBQVksQ0FBQ1UsV0FBVyxFQUFFO01BQUVDLFVBQVUsRUFBRTtJQUFLLENBQUMsQ0FBQztJQUV4RSxNQUFNQyxLQUFLLEdBQUcsSUFBSTlDLGtCQUFrQixDQUFDRSxZQUFZLEVBQUUzRSxPQUFPLENBQUM7SUFDM0R1SCxLQUFLLENBQUNsQyxLQUFLLENBQUM7TUFDVnZELEtBQUssRUFBRSxLQUFLO01BQ1pxRSxPQUFPLEVBQUU7UUFDUHJELEdBQUcsRUFBRSxDQUFDO1FBQ05DLEdBQUcsRUFBRW9FLElBQUksQ0FBQ0M7TUFDWixDQUFDO01BQ0RmLEtBQUssRUFBRTtRQUNMdkQsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ1pDLEdBQUcsRUFBRTtNQUNQLENBQUM7TUFDRFEsUUFBUSxFQUFFO0lBQ1osQ0FBQyxDQUFDO0lBRUZqQyxvQkFBUyxDQUFDbUIsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNO01BQ3pCakMsUUFBUSxDQUFDVixNQUFNLENBQUNiLEtBQUssRUFBRVEsTUFBTSxDQUFDO0lBQ2hDLENBQUMsQ0FBQztFQUNKO0FBQ0Y7QUFFQXNCLE1BQU0sQ0FBQ3lHLE1BQU0sR0FBRyxNQUFNO0VBQ3BCLElBQUlWLElBQUksQ0FBQyxDQUFDO0FBQ1osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1zcGhlcmljYWwtcm90b3IvLi9kZW1vU3JjL0NvbW1vbi5qcz8yYzA3Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1zcGhlcmljYWwtcm90b3IvLi9lc20vU3BoZXJpY2FsUm90b3IuanM/Yzc3NCIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLXJvdG9yLy4vZXNtL0F1dG9TcGhlcmljYWxSb3Rvci5qcz9jYWQ1Iiwid2VicGFjazovL0BtYXNhdG9tYWtpbm8vdGhyZWVqcy1zcGhlcmljYWwtcm90b3IvLi9lc20vU3BoZXJpY2FsUm90b3JDb25maWcuanM/NGEwMSIsIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLXJvdG9yLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby90aHJlZWpzLXNwaGVyaWNhbC1yb3Rvci8uL2RlbW9TcmMvZGVtb0hvcml6b250YWxSb3RhdGlvbi5qcz85NmU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFtYmllbnRMaWdodCxcbiAgQXhlc0hlbHBlcixcbiAgQ29sb3IsXG4gIENvbmVHZW9tZXRyeSxcbiAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgV2ViR0xSZW5kZXJlcixcbiAgTWVzaCxcbn0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21tb24ge1xuICBzdGF0aWMgaW5pdFNjZW5lKCkge1xuICAgIHJldHVybiBuZXcgU2NlbmUoKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0TGlnaHQoc2NlbmUpIHtcbiAgICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAxLjApO1xuICAgIHNjZW5lLmFkZChhbWJpZW50TGlnaHQpO1xuICAgIHJldHVybiBhbWJpZW50TGlnaHQ7XG4gIH1cblxuICBzdGF0aWMgaW5pdENhbWVyYShzY2VuZSwgVywgSCwgbmVhciA9IDEsIGZhciA9IDQwMCkge1xuICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSg0NSwgVyAvIEgsIG5lYXIsIGZhcik7XG4gICAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAxMDApO1xuICAgIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZChmYWxzZSk7XG4gICAgc2NlbmUuYWRkKGNhbWVyYSk7XG4gICAgcmV0dXJuIGNhbWVyYTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0Q29udHJvbChjYW1lcmEsIHJlbmRlcikge1xuICAgIGxldCBkb21FbGVtZW50O1xuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIGRvbUVsZW1lbnQgPSByZW5kZXIuZG9tRWxlbWVudDtcbiAgICB9XG4gICAgY29uc3QgY29udHJvbCA9IG5ldyBPcmJpdENvbnRyb2xzKGNhbWVyYSwgZG9tRWxlbWVudCk7XG4gICAgY29udHJvbC51cGRhdGUoKTtcbiAgICByZXR1cm4gY29udHJvbDtcbiAgfVxuXG4gIHN0YXRpYyBpbml0UmVuZGVyZXIoVywgSCwgb3B0aW9uKSB7XG4gICAgb3B0aW9uID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgY29sb3I6IDB4MDAwMDAwLFxuICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICB9LFxuICAgICAgb3B0aW9uXG4gICAgKTtcblxuICAgIGNvbnN0IHJlbmRlcmVyID0gbmV3IFdlYkdMUmVuZGVyZXIoe1xuICAgICAgYW50aWFsaWFzOiBvcHRpb24uYW50aWFsaWFzLFxuICAgIH0pO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcihuZXcgQ29sb3Iob3B0aW9uLmNvbG9yKSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXLCBIKTtcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICByZXR1cm4gcmVuZGVyZXI7XG4gIH1cblxuICBzdGF0aWMgaW5pdEhlbHBlcihzY2VuZSkge1xuICAgIGNvbnN0IGF4ZXNIZWxwZXIgPSBuZXcgQXhlc0hlbHBlcigyMCk7XG4gICAgc2NlbmUuYWRkKGF4ZXNIZWxwZXIpO1xuICAgIGNvbnN0IGNvbmUgPSBuZXcgTWVzaChcbiAgICAgIG5ldyBDb25lR2VvbWV0cnkoNSwgMTAsIDE2KSxcbiAgICAgIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IHdpcmVmcmFtZTogdHJ1ZSB9KVxuICAgICk7XG4gICAgc2NlbmUuYWRkKGNvbmUpO1xuICAgIHJldHVybiBheGVzSGVscGVyO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwsIH0gZnJvbSBcIi4vXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG52YXIgU3BoZXJpY2FsUm90b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BoZXJpY2FsUm90b3IoY2FtZXJhQ29udHJvbGxlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNhbWVyYUNvbnRyb2xsZXIgPSBjYW1lcmFDb250cm9sbGVyO1xuICAgICAgICB0aGlzLmlzUm90YXRpb24gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOOCq+ODoeODqeOCkuaoquWbnui7ouOBleOBm+OCi1xuICAgICAgICAgKiDlvoDlvqnjgafjga/jgarjgY/nhKHpmZDpgYvli5XjgIJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm90YXRlVGhldGEgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9jb25maWcuc3BlZWQgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBfdGhpcy5jYW1lcmFDb250cm9sbGVyLmFkZFBvc2l0aW9uKFwidGhldGFcIiwgX3RoaXMuX2NvbmZpZy5zcGVlZCAqIChlLmRlbHRhIC8gKDEwMDAgLyAzMCkpLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTcGhlcmljYWxSb3Rvci5wcm90b3R5cGUsIFwiY29uZmlnXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnID0gU3BoZXJpY2FsUm90b3JDb25maWdVdGlsLmluaXQocGFyYW1ldGVycyk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiDlm57ou6LjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLplovlp4vjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIHJvdGF0ZeOBqHN0b3Djga/lr77jga7plqLkv4Ljgafjga/jgarjgYTjgILnlbDjgarjgotvcHRpb27jgpLmjIflrprjgZXjgozjgZ/loLTlkIjjgIFyb3RhdGXjga/nj77nirbjga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLkuIrmm7jjgY3jgZfjgablho3lrp/ooYzjgZXjgozjgovjgIJcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICovXG4gICAgU3BoZXJpY2FsUm90b3IucHJvdG90eXBlLnJvdGF0ZSA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSb3RhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy/mqKrlm57ou6JcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5zcGVlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBSQUZUaWNrZXIub24oXCJ0aWNrXCIsIHRoaXMucm90YXRlVGhldGEpO1xuICAgICAgICB9XG4gICAgICAgIC8v57im5b6A5b6p44Or44O844OXXG4gICAgICAgIHRoaXMuc3RhcnRTcGhlcmljYWxDYW1lcmFMb29wKFwicGhpXCIsIG9wdGlvbik7XG4gICAgICAgIC8v5qiq5b6A5b6p44Or44O844OXXG4gICAgICAgIHRoaXMuc3RhcnRTcGhlcmljYWxDYW1lcmFMb29wKFwidGhldGFcIiwgb3B0aW9uKTtcbiAgICAgICAgLy/jgrrjg7zjg6DjgqTjg7PjgqLjgqbjg4jjg6vjg7zjg5dcbiAgICAgICAgdGhpcy5zdGFydFNwaGVyaWNhbENhbWVyYUxvb3AoXCJyYWRpdXNcIiwgb3B0aW9uKTtcbiAgICAgICAgdGhpcy5pc1JvdGF0aW9uID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIGNvbmZpZ+OCquODluOCuOOCp+OCr+ODiOOBi+OCieOAgee4puOAgeaoquOAgeOCuuODvOODoOODq+ODvOODl+OBrueKtuaFi+OCkuWPluOCiuWHuuOBmeOAglxuICAgICAqIOioreWumuOBleOCjOOBpuOBhOOCi+WgtOWQiOOAgeODq+ODvOODl+OCkumWi+Wni+OBmeOCi+OAglxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGUg57im44CB5qiq44CB44K644O844Og44Gu44GE44Ga44KM44GLXG4gICAgICogQHBhcmFtIG9wdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgU3BoZXJpY2FsUm90b3IucHJvdG90eXBlLnN0YXJ0U3BoZXJpY2FsQ2FtZXJhTG9vcCA9IGZ1bmN0aW9uICh0eXBlLCBvcHRpb24pIHtcbiAgICAgICAgdmFyIGxvb3AgPSBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwuZXh0cmFjdFNwaGVyaWNhbFBhcmFtKHRoaXMuX2NvbmZpZywgdHlwZSk7XG4gICAgICAgIGlmIChsb29wID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuY2FtZXJhQ29udHJvbGxlci5sb29wKHR5cGUsIGxvb3AubWluLCBsb29wLm1heCwge1xuICAgICAgICAgICAgZHVyYXRpb246IGxvb3AuZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydFRpbWU6IG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi5zdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICog44Kr44Oh44Op44Gu5Zue6Lui44KS5LiA5pmC5YGc5q2i44GZ44KL44CCXG4gICAgICogQHBhcmFtIFtvcHRpb25dIG9wdGlvbi5yZXR1cm5SID0gZmFsc2Xjga7mmYLjgIHjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLooYzjgo/jgarjgYTjgIJcbiAgICAgKi9cbiAgICBTcGhlcmljYWxSb3Rvci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUm90YXRpb24pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuaXNSb3RhdGlvbiA9IGZhbHNlO1xuICAgICAgICBSQUZUaWNrZXIub2ZmKFwidGlja1wiLCB0aGlzLnJvdGF0ZVRoZXRhKTtcbiAgICAgICAgdGhpcy5jYW1lcmFDb250cm9sbGVyLnR3ZWVucy5zdG9wKCk7XG4gICAgICAgIG9wdGlvbiA9IFNwaGVyaWNhbFJvdG9yLmdldERlZmF1bHRTdG9wUGFyYW0ob3B0aW9uKTtcbiAgICAgICAgdGhpcy5yZXR1cm5Ub0RlZmF1bHRSKG9wdGlvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiDjgqvjg6Hjg6njgpLjg4fjg5Xjgqnjg6vjg4jkvY3nva7jgb7jgafmiLvjgZlcbiAgICAgKiBAcGFyYW0gb3B0aW9uXG4gICAgICogQHByb3RlY3RlZFxuICAgICAqL1xuICAgIFNwaGVyaWNhbFJvdG9yLnByb3RvdHlwZS5yZXR1cm5Ub0RlZmF1bHRSID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5fY29uZmlnKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVmYXVsdFIpICE9IG51bGwgJiYgKG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi5yZXR1cm5SKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFDb250cm9sbGVyLm1vdmVQb3NpdGlvbihcInJhZGl1c1wiLCB0aGlzLl9jb25maWcuZGVmYXVsdFIsIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzMzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNwaGVyaWNhbFJvdG9yLmdldERlZmF1bHRTdG9wUGFyYW0gPSBmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgb3B0aW9uICE9PSBudWxsICYmIG9wdGlvbiAhPT0gdm9pZCAwID8gb3B0aW9uIDogKG9wdGlvbiA9IHt9KTtcbiAgICAgICAgKF9hID0gb3B0aW9uLnJldHVyblIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRpb24ucmV0dXJuUiA9IHRydWUpO1xuICAgICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIFNwaGVyaWNhbFJvdG9yO1xufSgpKTtcbmV4cG9ydCB7IFNwaGVyaWNhbFJvdG9yIH07XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuaW1wb3J0IHsgU3BoZXJpY2FsUm90b3IgfSBmcm9tIFwiLi9cIjtcbi8qKlxuICog44Oe44Km44K55pON5L2c44KS55uj6KaW44GX44CB5Zue6Lui44KS5Yi25b6h44GZ44KL44Kv44Op44K544CCXG4gKiDjg57jgqbjgrnjgYznhKHmk43kvZzjga7loLTlkIjjgIHlm57ou6LjgpLlp4vjgoHjgIHmk43kvZzjgYzlho3plovjgZXjgozjgovjgajlgZzmraLjgZnjgovjgIJcbiAqL1xudmFyIEF1dG9TcGhlcmljYWxSb3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXV0b1NwaGVyaWNhbFJvdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEF1dG9TcGhlcmljYWxSb3RvcihzbGVlcFdhdGNoZXIsIGNhbWVyYUNvbnRyb2xsZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY2FtZXJhQ29udHJvbGxlcikgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2xlZXBXYXRjaGVyID0gc2xlZXBXYXRjaGVyO1xuICAgICAgICBfdGhpcy5pc1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm9uU2xlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5yb3RhdGUoX3RoaXMubG9vcE9wdGlvbik7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm9uV2FrZXVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuc3RvcCgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnuOCpuOCueOBruebo+imluOCkuS4gOaZguWBnOatouOBmeOCi1xuICAgICAqIEBwYXJhbSBbb3B0aW9uXSBvcHRpb24ucmV0dXJuUiA944CAZmFsc2Xjga7mmYLjga7jgb/jgIHjgqLjg4vjg6Hjg7zjgrfjg6fjg7PjgpLooYzjgo/jgZrljp/kvY3nva7jgafjg57jgqbjgrnnm6PoppbjgYzlgZzmraLjgZnjgovjgILnm6PoppbjgpLlgZzmraLjgZXjgZvjgZ/lvozjgavliKXjga7jgqLjg4vjg6Hjg7zjgrfjg6fjg7Pjgafjgqvjg6Hjg6njgpLnp7vli5XjgZfjgZ/jgYvjgaPjgZ/jgorjgIHlhYPjgavmiLvjgZfjgZ/jgYvjgaPjgZ/jgorjgZnjgovloLTlkIjjgavkvb/jgYbjgIJcbiAgICAgKi9cbiAgICBBdXRvU3BoZXJpY2FsUm90b3IucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdGFydClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pc1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbiA9IFNwaGVyaWNhbFJvdG9yLmdldERlZmF1bHRTdG9wUGFyYW0ob3B0aW9uKTtcbiAgICAgICAgdGhpcy5zdG9wV2F0Y2hlcigpO1xuICAgICAgICB0aGlzLnN0b3Aob3B0aW9uKTtcbiAgICB9O1xuICAgIEF1dG9TcGhlcmljYWxSb3Rvci5wcm90b3R5cGUuc3RvcFdhdGNoZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2xlZXBXYXRjaGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzbGVlcFwiLCB0aGlzLm9uU2xlZXApO1xuICAgICAgICB0aGlzLnNsZWVwV2F0Y2hlci5yZW1vdmVFdmVudExpc3RlbmVyKFwid2FrZXVwXCIsIHRoaXMub25XYWtldXApO1xuICAgICAgICB0aGlzLnNsZWVwV2F0Y2hlci5zdG9wKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiDjg57jgqbjgrnjga7nm6PoppbjgpLlho3plovjgZnjgovjgIJcbiAgICAgKiDlkITnqK7oqK3lrprjga93YXRjaCgp44Gn5oyH5a6a44GV44KM44Gf44Kq44OX44K344On44Oz44KS5byV44GN57aZ44GQ44CCXG4gICAgICogcGF1c2UoKemWouaVsOOBp+WBnOatouOBleOCjOOBn+ebo+imluOCkuWGjemWi+OBleOBm+OCi+OBn+OCgeOBrumWouaVsOOAglxuICAgICAqL1xuICAgIEF1dG9TcGhlcmljYWxSb3Rvci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0YXJ0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmlzU3RhcnQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXJ0V2F0Y2hlcigpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICog44Oe44Km44K544Gu55uj6KaW44KS6ZaL5aeL44GZ44KL44CCXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0gbG9vcE9wdGlvblxuICAgICAqL1xuICAgIEF1dG9TcGhlcmljYWxSb3Rvci5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiAocGFyYW1ldGVycywgbG9vcE9wdGlvbikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIHRoaXMubG9vcE9wdGlvbiA9IGxvb3BPcHRpb247XG4gICAgICAgIHRoaXMuaXNTdGFydCA9IHRydWU7XG4gICAgICAgIHRoaXMuc3RhcnRXYXRjaGVyKCk7XG4gICAgfTtcbiAgICBBdXRvU3BoZXJpY2FsUm90b3IucHJvdG90eXBlLnN0YXJ0V2F0Y2hlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdG9wV2F0Y2hlcigpO1xuICAgICAgICB0aGlzLnNsZWVwV2F0Y2hlci5hZGRFdmVudExpc3RlbmVyKFwic2xlZXBcIiwgdGhpcy5vblNsZWVwKTtcbiAgICAgICAgdGhpcy5zbGVlcFdhdGNoZXIuYWRkRXZlbnRMaXN0ZW5lcihcIndha2V1cFwiLCB0aGlzLm9uV2FrZXVwKTtcbiAgICAgICAgdGhpcy5zbGVlcFdhdGNoZXIuc3RhcnQoKTtcbiAgICB9O1xuICAgIEF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfTEFUX0RVUkFUSU9OID0gMzAgKiAxMDAwO1xuICAgIEF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfUl9EVVJBVElPTiA9IDMwICogMTAwMDtcbiAgICByZXR1cm4gQXV0b1NwaGVyaWNhbFJvdG9yO1xufShTcGhlcmljYWxSb3RvcikpO1xuZXhwb3J0IHsgQXV0b1NwaGVyaWNhbFJvdG9yIH07XG4iLCJpbXBvcnQgeyBBdXRvU3BoZXJpY2FsUm90b3IgfSBmcm9tIFwiLi9cIjtcbnZhciBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3BoZXJpY2FsUm90b3JDb25maWdVdGlsKCkge1xuICAgIH1cbiAgICBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWwuaW5pdCA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHZhciBfZywgX2gsIF9qO1xuICAgICAgICBjb25maWcgIT09IG51bGwgJiYgY29uZmlnICE9PSB2b2lkIDAgPyBjb25maWcgOiAoY29uZmlnID0ge30pO1xuICAgICAgICAoX2EgPSBjb25maWcubG9vcFBoaSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGNvbmZpZy5sb29wUGhpID0ge30pO1xuICAgICAgICAoX2IgPSAoX2cgPSBjb25maWcubG9vcFBoaSkuZHVyYXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChfZy5kdXJhdGlvbiA9IEF1dG9TcGhlcmljYWxSb3Rvci5ERUZBVUxUX0xPT1BfTEFUX0RVUkFUSU9OKTtcbiAgICAgICAgKF9jID0gY29uZmlnLmxvb3BUaGV0YSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogKGNvbmZpZy5sb29wVGhldGEgPSB7fSk7XG4gICAgICAgIChfZCA9IChfaCA9IGNvbmZpZy5sb29wVGhldGEpLmR1cmF0aW9uKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAoX2guZHVyYXRpb24gPSBBdXRvU3BoZXJpY2FsUm90b3IuREVGQVVMVF9MT09QX0xBVF9EVVJBVElPTik7XG4gICAgICAgIChfZSA9IGNvbmZpZy5sb29wUikgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogKGNvbmZpZy5sb29wUiA9IHt9KTtcbiAgICAgICAgKF9mID0gKF9qID0gY29uZmlnLmxvb3BSKS5kdXJhdGlvbikgIT09IG51bGwgJiYgX2YgIT09IHZvaWQgMCA/IF9mIDogKF9qLmR1cmF0aW9uID0gQXV0b1NwaGVyaWNhbFJvdG9yLkRFRkFVTFRfTE9PUF9SX0RVUkFUSU9OKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIOODq+ODvOODl+OCouODi+ODoeODvOOCt+ODp+ODs+OBq+W/heimgeOBquaDheWgseOCkuOAgWNvbmZpZ+OCquODluOCuOOCp+OCr+ODiOOBi+OCieWPluOCiuWHuuOBmeOAglxuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKiBAcGFyYW0gdHlwZVxuICAgICAqL1xuICAgIFNwaGVyaWNhbFJvdG9yQ29uZmlnVXRpbC5leHRyYWN0U3BoZXJpY2FsUGFyYW0gPSBmdW5jdGlvbiAoY29uZmlnLCB0eXBlKSB7XG4gICAgICAgIHZhciBnZXRMb29wUGFyYW1ldGVyID0gZnVuY3Rpb24gKGNvbmZpZywgdHlwZSkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInBoaVwiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnLmxvb3BQaGk7XG4gICAgICAgICAgICAgICAgY2FzZSBcInRoZXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25maWcubG9vcFRoZXRhO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyYWRpdXNcIjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5sb29wUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcGFyYW0gPSBnZXRMb29wUGFyYW1ldGVyKGNvbmZpZywgdHlwZSk7XG4gICAgICAgIGlmIChwYXJhbSA9PSBudWxsIHx8IHBhcmFtLm1heCA9PSBudWxsIHx8IHBhcmFtLm1pbiA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBwYXJhbTtcbiAgICB9O1xuICAgIHJldHVybiBTcGhlcmljYWxSb3RvckNvbmZpZ1V0aWw7XG59KCkpO1xuZXhwb3J0IHsgU3BoZXJpY2FsUm90b3JDb25maWdVdGlsIH07XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9TcGhlcmljYWxSb3RvclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vQXV0b1NwaGVyaWNhbFJvdG9yXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9Sb3RvclN0b3BDb25maWdcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NwaGVyaWNhbFJvdG9yQ29uZmlnXCI7XG4iLCJpbXBvcnQgeyBDb21tb24gfSBmcm9tIFwiLi9Db21tb25cIjtcbmltcG9ydCB7IFJBRlRpY2tlciB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IEZvZywgU3BoZXJpY2FsIH0gZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgeyBBdXRvU3BoZXJpY2FsUm90b3IgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCB7IERyYWdXYXRjaGVyLCBTbGVlcFdhdGNoZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby90aHJlZWpzLWRyYWctd2F0Y2hlclwiO1xuaW1wb3J0IHtcbiAgU3BoZXJpY2FsQ29udHJvbGxlcixcbiAgU3BoZXJpY2FsQ29udHJvbGxlclV0aWwsXG59IGZyb20gXCJAbWFzYXRvbWFraW5vL3RocmVlanMtc3BoZXJpY2FsLWNvbnRyb2xzXCI7XG5cbmxldCBzY2VuZTtcbmV4cG9ydCBjbGFzcyBEZW1vIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgVyA9IDY0MDtcbiAgICBjb25zdCBIID0gNDgwO1xuXG4gICAgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG4gICAgc2NlbmUuZm9nID0gbmV3IEZvZygweDAwMDAwMCwgODAsIDE2MCk7XG4gICAgQ29tbW9uLmluaXRMaWdodChzY2VuZSk7XG4gICAgY29uc3QgY2FtZXJhID0gQ29tbW9uLmluaXRDYW1lcmEoc2NlbmUsIFcsIEgpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gQ29tbW9uLmluaXRSZW5kZXJlcihXLCBILCB7IGFudGlhbGlhczogZmFsc2UgfSk7XG5cbiAgICBDb21tb24uaW5pdEhlbHBlcihzY2VuZSk7XG5cbiAgICBjb25zdCB0YXJnZXQgPSBTcGhlcmljYWxDb250cm9sbGVyVXRpbC5nZW5lcmF0ZUNhbWVyYVRhcmdldCgpO1xuICAgIHNjZW5lLmFkZCh0YXJnZXQpO1xuICAgIGNvbnN0IGNvbnRyb2wgPSBuZXcgU3BoZXJpY2FsQ29udHJvbGxlcihjYW1lcmEsIHRhcmdldCk7XG5cbiAgICBjb250cm9sLmluaXRDYW1lcmFQb3NpdGlvbihuZXcgU3BoZXJpY2FsKDEwMCwgTWF0aC5QSSAvIDIsIDApKTtcbiAgICBjb25zdCBkcmFnV2F0Y2hlciA9IG5ldyBEcmFnV2F0Y2hlcihyZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICBjb25zdCBzbGVlcFdhdGNoZXIgPSBuZXcgU2xlZXBXYXRjaGVyKGRyYWdXYXRjaGVyLCB7IHRpbWVPdXRfbXM6IDEwMDAgfSk7XG5cbiAgICBjb25zdCByb3RvciA9IG5ldyBBdXRvU3BoZXJpY2FsUm90b3Ioc2xlZXBXYXRjaGVyLCBjb250cm9sKTtcbiAgICByb3Rvci53YXRjaCh7XG4gICAgICBzcGVlZDogMC4wMDUsXG4gICAgICBsb29wUGhpOiB7XG4gICAgICAgIG1pbjogMCxcbiAgICAgICAgbWF4OiBNYXRoLlBJLFxuICAgICAgfSxcbiAgICAgIGxvb3BSOiB7XG4gICAgICAgIG1pbjogMTAwIC8gMyxcbiAgICAgICAgbWF4OiAxMDAsXG4gICAgICB9LFxuICAgICAgZGVmYXVsdFI6IDEwMCxcbiAgICB9KTtcblxuICAgIFJBRlRpY2tlci5vbihcInRpY2tcIiwgKCkgPT4ge1xuICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgIH0pO1xuICB9XG59XG5cbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gIG5ldyBEZW1vKCk7XG59O1xuIl0sIm5hbWVzIjpbIkFtYmllbnRMaWdodCIsIkF4ZXNIZWxwZXIiLCJDb2xvciIsIkNvbmVHZW9tZXRyeSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJTY2VuZSIsIldlYkdMUmVuZGVyZXIiLCJNZXNoIiwiT3JiaXRDb250cm9scyIsIkNvbW1vbiIsImluaXRTY2VuZSIsImluaXRMaWdodCIsInNjZW5lIiwiYW1iaWVudExpZ2h0IiwiYWRkIiwiaW5pdENhbWVyYSIsIlciLCJIIiwibmVhciIsImZhciIsImNhbWVyYSIsInBvc2l0aW9uIiwic2V0IiwidXBkYXRlTWF0cml4V29ybGQiLCJpbml0Q29udHJvbCIsInJlbmRlciIsImRvbUVsZW1lbnQiLCJjb250cm9sIiwidXBkYXRlIiwiaW5pdFJlbmRlcmVyIiwib3B0aW9uIiwiT2JqZWN0IiwiYXNzaWduIiwiY29sb3IiLCJhbnRpYWxpYXMiLCJyZW5kZXJlciIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwic2V0Q2xlYXJDb2xvciIsInNldFNpemUiLCJzZXRQaXhlbFJhdGlvIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImluaXRIZWxwZXIiLCJheGVzSGVscGVyIiwiY29uZSIsIndpcmVmcmFtZSIsIlNwaGVyaWNhbFJvdG9yQ29uZmlnVXRpbCIsIlJBRlRpY2tlciIsIlNwaGVyaWNhbFJvdG9yIiwiY2FtZXJhQ29udHJvbGxlciIsIl90aGlzIiwiaXNSb3RhdGlvbiIsInJvdGF0ZVRoZXRhIiwiZSIsIl9jb25maWciLCJzcGVlZCIsImFkZFBvc2l0aW9uIiwiZGVsdGEiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsInBhcmFtZXRlcnMiLCJpbml0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsInJvdGF0ZSIsInN0b3AiLCJvbiIsInN0YXJ0U3BoZXJpY2FsQ2FtZXJhTG9vcCIsInR5cGUiLCJsb29wIiwiZXh0cmFjdFNwaGVyaWNhbFBhcmFtIiwibWluIiwibWF4IiwiZHVyYXRpb24iLCJzdGFydFRpbWUiLCJvZmYiLCJ0d2VlbnMiLCJnZXREZWZhdWx0U3RvcFBhcmFtIiwicmV0dXJuVG9EZWZhdWx0UiIsIl9hIiwiZGVmYXVsdFIiLCJyZXR1cm5SIiwibW92ZVBvc2l0aW9uIiwiX19leHRlbmRzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiQXV0b1NwaGVyaWNhbFJvdG9yIiwiX3N1cGVyIiwic2xlZXBXYXRjaGVyIiwiaXNTdGFydCIsIm9uU2xlZXAiLCJsb29wT3B0aW9uIiwib25XYWtldXAiLCJwYXVzZSIsInN0b3BXYXRjaGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlc3VtZSIsInN0YXJ0V2F0Y2hlciIsIndhdGNoIiwiY29uZmlnIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0YXJ0IiwiREVGQVVMVF9MT09QX0xBVF9EVVJBVElPTiIsIkRFRkFVTFRfTE9PUF9SX0RVUkFUSU9OIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJfaiIsImxvb3BQaGkiLCJsb29wVGhldGEiLCJsb29wUiIsImdldExvb3BQYXJhbWV0ZXIiLCJwYXJhbSIsIkZvZyIsIlNwaGVyaWNhbCIsIkRyYWdXYXRjaGVyIiwiU2xlZXBXYXRjaGVyIiwiU3BoZXJpY2FsQ29udHJvbGxlciIsIlNwaGVyaWNhbENvbnRyb2xsZXJVdGlsIiwiRGVtbyIsImZvZyIsInRhcmdldCIsImdlbmVyYXRlQ2FtZXJhVGFyZ2V0IiwiaW5pdENhbWVyYVBvc2l0aW9uIiwiTWF0aCIsIlBJIiwiZHJhZ1dhdGNoZXIiLCJ0aW1lT3V0X21zIiwicm90b3IiLCJvbmxvYWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///243\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],g=!0,s=0;s<U.length;s++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[s])))?U.splice(s--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(C--,1);var i=F();void 0!==i&&(Q=i)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={256:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,s,i]=F,C=0;if(g.some((U=>0!==Q[U]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(i)var l=i(__webpack_require__)}for(U&&U(F);C<g.length;C++)I=g[C],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(l)},F=self.webpackChunk_masatomakino_threejs_spherical_rotor=self.webpackChunk_masatomakino_threejs_spherical_rotor||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(243)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();