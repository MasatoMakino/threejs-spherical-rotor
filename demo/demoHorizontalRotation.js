(()=>{"use strict";var __webpack_modules__={243:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n// UNUSED EXPORTS: Demo\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\nclass Common {\n  static initScene() {\n    return new three_module/* Scene */.xsS();\n  }\n\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n\n  static initCamera(scene, W, H, near = 1, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, near, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n\n  static initControl(camera, render) {\n    let domElement;\n\n    if (render) {\n      domElement = render.domElement;\n    }\n\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n\n  static initRenderer(W, H, option) {\n    option = Object.assign({\n      color: 0x000000,\n      antialias: true\n    }, option);\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      antialias: option.antialias\n    });\n    document.body.appendChild(renderer.domElement);\n    renderer.setClearColor(new three_module/* Color */.Ilk(option.color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(20);\n    scene.add(axesHelper);\n    const cone = new three_module/* Mesh */.Kj0(new three_module/* ConeGeometry */.b_z(5, 10, 16), new three_module/* MeshBasicMaterial */.vBJ({\n      wireframe: true\n    }));\n    scene.add(cone);\n    return axesHelper;\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-spherical-controls/esm/index.js + 12 modules\nvar threejs_spherical_controls_esm = __webpack_require__(15);\n;// CONCATENATED MODULE: ./esm/SphericalRotor.js\n\n\n\n\nclass SphericalRotor {\n  constructor(cameraController) {\n    this.cameraController = cameraController;\n    this.isRotation = false;\n    /**\n     * @deprecated use rotate();\n     */\n\n    this.startRotation = () => {\n      this.rotate();\n    };\n    /**\n     * カメラを横回転させる\n     * 往復ではなく無限運動。\n     */\n\n\n    this.rotateTheta = e => {\n      if (this._config.speed == null) return;\n      this.cameraController.addPosition(threejs_spherical_controls_esm/* SphericalParamType.THETA */.xP.THETA, this._config.speed * (e.delta / (1000 / 30)), false, true);\n    };\n    /**\n     * カメラの自動回転を停止する\n     * @deprecated use stop()\n     */\n\n\n    this.stopRotation = () => {\n      this.stop();\n    };\n  }\n\n  set config(parameters) {\n    this._config = SphericalRotorConfigUtil.init(parameters);\n  }\n\n  rotate() {\n    this.stop();\n    if (this.isRotation) return; //横回転\n\n    if (this._config.speed != null) {\n      esm/* RAFTicker.on */.Fz.on(esm/* RAFTickerEventType.tick */.M9.tick, this.rotateTheta);\n    } //縦往復ループ\n\n\n    this.startSphericalCameraLoop(threejs_spherical_controls_esm/* SphericalParamType.PHI */.xP.PHI); //横往復ループ\n\n    this.startSphericalCameraLoop(threejs_spherical_controls_esm/* SphericalParamType.THETA */.xP.THETA); //ズームインアウトループ\n\n    this.startSphericalCameraLoop(threejs_spherical_controls_esm/* SphericalParamType.R */.xP.R);\n    this.isRotation = true;\n  }\n  /**\n   * configオブジェクトから、縦、横、ズームループの状態を取り出す。\n   * 設定されている場合、ループを開始する。\n   *\n   * @param type 縦、横、ズームのいずれか\n   * @private\n   */\n\n\n  startSphericalCameraLoop(type) {\n    const loop = SphericalRotorConfigUtil.extractSphericalParam(this._config, type);\n    if (loop == null) return;\n    this.cameraController.loop(type, loop.min, loop.max, {\n      duration: loop.duration\n    });\n  }\n  /**\n   * カメラの回転を一時停止する。\n   * @param [option] option.returnR = falseの時、アニメーションを行わない。\n   */\n\n\n  stop(option) {\n    if (!this.isRotation) return;\n    this.isRotation = false;\n    esm/* RAFTicker.off */.Fz.off(esm/* RAFTickerEventType.tick */.M9.tick, this.rotateTheta);\n    this.cameraController.tweens.stop();\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.returnToDefaultR(option);\n  }\n  /**\n   * カメラをデフォルト位置まで戻す\n   * @param option\n   * @protected\n   */\n\n\n  returnToDefaultR(option) {\n    var _a;\n\n    if (((_a = this._config) === null || _a === void 0 ? void 0 : _a.defaultR) != null && (option === null || option === void 0 ? void 0 : option.returnR) === true) {\n      this.cameraController.movePosition(threejs_spherical_controls_esm/* SphericalParamType.R */.xP.R, this._config.defaultR, {\n        duration: 333\n      });\n    }\n  }\n\n  static getDefaultStopParam(option) {\n    var _a;\n\n    option !== null && option !== void 0 ? option : option = {};\n    (_a = option.returnR) !== null && _a !== void 0 ? _a : option.returnR = true;\n    return option;\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/threejs-drag-watcher/esm/index.js + 4 modules\nvar threejs_drag_watcher_esm = __webpack_require__(237);\n;// CONCATENATED MODULE: ./esm/AutoSphericalRotor.js\n\n\n/**\n * マウス操作を監視し、回転を制御するクラス。\n * マウスが無操作の場合、回転を始め、操作が再開されると停止する。\n */\n\nclass AutoSphericalRotor extends SphericalRotor {\n  constructor(sleepWatcher, cameraController) {\n    super(cameraController);\n    this.sleepWatcher = sleepWatcher;\n    this.isStart = false;\n\n    this.onSleep = () => {\n      this.rotate();\n    };\n\n    this.onWakeup = () => {\n      this.stop();\n    };\n  }\n  /**\n   * マウスの監視を一時停止する\n   * @param [option]　option.returnR =　falseの時のみ、アニメーションを行わず原位置でマウス監視が停止する。監視を停止させた後に別のアニメーションでカメラを移動したかったり、元に戻したかったりする場合に使う。\n   */\n\n\n  pause(option) {\n    if (!this.isStart) return;\n    this.isStart = false;\n    option = SphericalRotor.getDefaultStopParam(option);\n    this.stopWatcher();\n    this.stop(option);\n  }\n\n  stopWatcher() {\n    this.sleepWatcher.removeEventListener(threejs_drag_watcher_esm/* SleepEventType.SLEEP */.On.SLEEP, this.onSleep);\n    this.sleepWatcher.removeEventListener(threejs_drag_watcher_esm/* SleepEventType.WAKEUP */.On.WAKEUP, this.onWakeup);\n    this.sleepWatcher.stop();\n  }\n  /**\n   * マウスの監視を再開する。\n   * 各種設定はstart()で指定されたオプションを引き継ぐ。\n   * pause()関数で停止された監視を再開させるための関数。\n   */\n\n\n  resume() {\n    if (this.isStart) return;\n    this.isStart = true;\n    this.startWatcher();\n  }\n  /**\n   * マウスの監視を開始する。\n   * @param parameters\n   * @deprecated use watch();\n   */\n\n\n  start(parameters) {\n    this.watch(parameters);\n  }\n  /**\n   * マウスの監視を開始する。\n   * @param parameters\n   */\n\n\n  watch(parameters) {\n    this.config = parameters;\n    this.isStart = true;\n    this.startWatcher();\n  }\n\n  startWatcher() {\n    this.stopWatcher();\n    this.sleepWatcher.addEventListener(threejs_drag_watcher_esm/* SleepEventType.SLEEP */.On.SLEEP, this.onSleep);\n    this.sleepWatcher.addEventListener(threejs_drag_watcher_esm/* SleepEventType.WAKEUP */.On.WAKEUP, this.onWakeup);\n    this.sleepWatcher.start();\n  }\n\n}\nAutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION = 30 * 1000;\nAutoSphericalRotor.DEFAULT_LOOP_R_DURATION = 30 * 1000;\n;// CONCATENATED MODULE: ./esm/SphericalRotorConfig.js\n\n\nclass SphericalRotorConfigUtil {\n  static init(config) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var _g, _h, _j;\n\n    config !== null && config !== void 0 ? config : config = {};\n    (_a = config.loopPhi) !== null && _a !== void 0 ? _a : config.loopPhi = {};\n    (_b = (_g = config.loopPhi).duration) !== null && _b !== void 0 ? _b : _g.duration = AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    (_c = config.loopTheta) !== null && _c !== void 0 ? _c : config.loopTheta = {};\n    (_d = (_h = config.loopTheta).duration) !== null && _d !== void 0 ? _d : _h.duration = AutoSphericalRotor.DEFAULT_LOOP_LAT_DURATION;\n    (_e = config.loopR) !== null && _e !== void 0 ? _e : config.loopR = {};\n    (_f = (_j = config.loopR).duration) !== null && _f !== void 0 ? _f : _j.duration = AutoSphericalRotor.DEFAULT_LOOP_R_DURATION;\n    return config;\n  }\n  /**\n   * ループアニメーションに必要な情報を、configオブジェクトから取り出す。\n   * @param config\n   * @param type\n   */\n\n\n  static extractSphericalParam(config, type) {\n    const getLoopParameter = (config, type) => {\n      switch (type) {\n        case threejs_spherical_controls_esm/* SphericalParamType.PHI */.xP.PHI:\n          return config.loopPhi;\n\n        case threejs_spherical_controls_esm/* SphericalParamType.THETA */.xP.THETA:\n          return config.loopTheta;\n\n        case threejs_spherical_controls_esm/* SphericalParamType.R */.xP.R:\n          return config.loopR;\n      }\n\n      return null;\n    };\n\n    const param = getLoopParameter(config, type);\n    if (param == null || param.max == null || param.min == null) return null;\n    return param;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demoHorizontalRotation.js\n\n\n\n\n\n\nlet scene;\nclass Demo {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H, {\n      antialias: false\n    });\n    Common.initHelper(scene);\n    const target = threejs_spherical_controls_esm/* SphericalControllerUtil.generateCameraTarget */.r$.generateCameraTarget();\n    scene.add(target);\n    const control = new threejs_spherical_controls_esm/* SphericalController */.R_(camera, target);\n    control.initCameraPosition(new three_module/* Spherical */.$V(100, Math.PI / 2, 0));\n    const dragWatcher = new threejs_drag_watcher_esm/* DragWatcher */.q8(renderer.domElement);\n    const sleepWatcher = new threejs_drag_watcher_esm/* SleepWatcher */.EH(dragWatcher, {\n      timeOut_ms: 1000\n    });\n    const rotor = new AutoSphericalRotor(sleepWatcher, control);\n    rotor.watch({\n      speed: 0.005,\n      loopPhi: {\n        min: 0,\n        max: Math.PI\n      },\n      loopR: {\n        min: 100 / 3,\n        max: 100\n      },\n      defaultR: 100\n    });\n    esm/* RAFTicker.on */.Fz.on(esm/* RAFTickerEventType.tick */.M9.tick, () => {\n      renderer.render(scene, camera);\n    });\n  }\n\n}\n\nwindow.onload = () => {\n  new Demo();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///243\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var I=1/0;for(t=0;t<deferred.length;t++){for(var[F,U,B]=deferred[t],g=!0,C=0;C<F.length;C++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[C])))?F.splice(C--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(t--,1);var i=U();void 0!==i&&(Q=i)}}return Q}B=B||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>B;t--)deferred[t]=deferred[t-1];deferred[t]=[F,U,B]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={256:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,I,[g,C,i]=U,t=0;if(g.some((F=>0!==Q[F]))){for(B in C)__webpack_require__.o(C,B)&&(__webpack_require__.m[B]=C[B]);if(i)var c=i(__webpack_require__)}for(F&&F(U);t<g.length;t++)I=g[t],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(c)},U=self.webpackChunk_masatomakino_threejs_spherical_rotor=self.webpackChunk_masatomakino_threejs_spherical_rotor||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(243)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();